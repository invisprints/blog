{
  
    
        "post0": {
            "title": "Jupyter 博文发布教程",
            "content": "&#22522;&#26412;&#35774;&#32622; . fastpages 会将存放在 _notebooks 中的 jupyter notebook 自动转换成博文，因此你应该将所有的 jupyter notebook 放在该文件夹下。 . fastpages 会将存放在 _post 文件夹内的 markdown 文章和 _word 中的 word 文章自动转换成博文。因此你的博文应该存放在这三个文件夹内。 . 所有的博文遵循同一套命名规范，即 YYYY-MM-DD-filename.ext，如本篇 notebook 教程的文件名为 2020-04-04-jupyter-tutorial.ipynb . FrontMatter . FrontMatter 位于每篇 notebook 中的第一个 cell 中，其作用是每篇博文的配置文件，它控制着每篇博文该如何展现内容。 . markdown # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . 有关 FrontMatter 的详细配置和说明可以参考 fastpages 说明 . &#26684;&#24335; . 本文仅介绍 fapages 中的一些亮点功能，关于 jupyter notebook 的使用请自行寻找相关教程 . 在 cell 开头如果加上 #hide ，fastpages 会隐藏该 cell 的输入和输出 . 在 cell 开头如果加上 #hide_input ，fastpages 会隐藏该 cell 的输入 . The comment #hide_input was used to hide the code that produced this. . 在 cell 开头如果加上 #collapse-hide ，fastpages会默认折叠该细胞，但可以手动展开 . 在 cell 开头如果加上 #collapse-show ，fastpages会默认展开该细胞，但可以手动折叠 . #collapse-hide import pandas as pd import plotly.express as px from IPython.display import HTML . . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . &#21487;&#35270;&#21270;&#26174;&#31034; . 在 fastpages 官网 中介绍了如何用 Altair 显示可交互图表的操作， 其实不只 Altair， fastapages 支持多种可视化框架。 需要注意的是，在最后显示阶段需要用 HTML(fig.to_html()) 代替平常 fig.show() . poltly . print(px.data.iris.__doc__) px.data.iris().head() . Each row represents a flower. https://en.wikipedia.org/wiki/Iris_flower_data_set Returns: A `pandas.DataFrame` with 150 rows and the following columns: `[&#39;sepal_length&#39;, &#39;sepal_width&#39;, &#39;petal_length&#39;, &#39;petal_width&#39;, &#39;species&#39;, &#39;species_id&#39;]`. . sepal_length sepal_width petal_length petal_width species species_id . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | 1 | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | 1 | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | 1 | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | 1 | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | 1 | . df = px.data.iris() fig = px.scatter(df, x=&quot;sepal_width&quot;, y=&quot;sepal_length&quot;, color=&quot;species&quot;, marginal_y=&quot;rug&quot;, marginal_x=&quot;histogram&quot;) HTML(fig.to_html()) . . . df = px.data.gapminder() fig = px.scatter(df, x=&quot;gdpPercap&quot;, y=&quot;lifeExp&quot;, animation_frame=&quot;year&quot;, animation_group=&quot;country&quot;, size=&quot;pop&quot;, color=&quot;continent&quot;, hover_name=&quot;country&quot;, facet_col=&quot;continent&quot;, log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90]) HTML(fig.to_html()) . . . df = px.data.election() fig = px.line_3d(df, x=&quot;Joly&quot;, y=&quot;Coderre&quot;, z=&quot;Bergeron&quot;, color=&quot;winner&quot;, line_dash=&quot;winner&quot;) HTML(fig.to_html()) . . . &#22270;&#29255; . 可以用类似 markdown 格式载入本地或远程图片 . ![](my_icons/fastai_logo.png) . . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . GIF &#22270;&#20687; . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . &#22270;&#27880; . 采用以下格式显示图注 . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . &#20854;&#23427;&#20142;&#28857; . Tweet &#21345;&#29255; . 输入 &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 显示如下信息 Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube &#35270;&#39057; . 输入 &gt; youtube: https://youtu.be/XfoYk_Z5AkI 显示如下信息 . Callouts . 输入 &gt; Warning: There will be no second warning! 显示如下信息 . Warning: There will be no second warning! . 输入 &gt; Important: Pay attention! It&#39;s important. 显示如下信息 . Important: Pay attention! It&#8217;s important. . 输入 &gt; Tip: This is my tip. 显示如下信息 . Tip: This is my tip. . 输入 &gt; Note: Take note of this. 显示如下信息 . Note: Take note of this. . &#33050;&#27880; . jupyter notebook 中脚注与 markdown 中的脚注有所区别，详细参见这篇文章 This guide provides more detail about this syntax . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://invisprints.github.io/blog/jupyter/2020/04/05/jupyter-tutorial.html",
            "relUrl": "/jupyter/2020/04/05/jupyter-tutorial.html",
            "date": " • Apr 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "markdown 博文发布教程",
            "content": "基本设置 . fastpages 会将存放在 _post 文件夹内的 markdown 文章自动转换成博文，因此你应该将所有的markdown博文放在该文件夹下。 . fastpages 也会将存放在 _notebooks 中的 jupyter notebook 和 _word 中的 word 文章自动转换成博文。因此你的博文应该存放在这三个文件夹内。 . 所有的博文遵循同一套命名规范，即 YYYY-MM-DD-filename.ext，如本篇 markdown 教程的文件名为 2020-04-04-markdown-tutorial.md . 格式 . markdown 文章格式遵从 markdown 格式，如不了解，请自行搜索相关内容。 . . . 以下内容引用自MWeb 标题 . Markdown 语法： . # 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ###### 第六级标题 `&lt;h6&gt;` . 效果如下： . 第一级标题 &lt;h1&gt; . 第二级标题 &lt;h2&gt; . 第六级标题 &lt;h6&gt; . 强调 . Markdown 语法： . *这些文字会生成`&lt;em&gt;`* _这些文字会生成`&lt;u&gt;`_ **这些文字会生成`&lt;strong&gt;`** __这些文字会生成`&lt;strong&gt;`__ . 效果如下： . 这些文字会生成&lt;em&gt; 这些文字会生成&lt;u&gt; . 这些文字会生成&lt;strong&gt; 这些文字会生成&lt;strong&gt; . 换行 . 四个及以上空格加回车。 . 列表 . 无序列表 . Markdown 语法： . * 项目一 无序列表 `* + 空格键` * 项目二 * 项目二的子项目一 无序列表 `TAB + * + 空格键` * 项目二的子项目二 . 效果如下： . 项目一 无序列表 * + 空格键 | 项目二 | 项目二的子项目一 无序列表 TAB + * + 空格键 | 项目二的子项目二 | . 有序列表 . Markdown 语法： . 1. 项目一 有序列表 `数字 + . + 空格键` 2. 项目二 3. 项目三 1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键` 2. 项目三的子项目二 . 效果如下： . 项目一 有序列表 数字 + . + 空格键 | 项目二 | 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 | 项目三的子项目二 | | 任务列表（Task lists） . Markdown 语法： . - [ ] 任务一 未做任务 `- + 空格 + [ ]` - [x] 任务二 已做任务 `- + 空格 + [x]` . 效果如下： . 任务一 未做任务 - + 空格 + [ ] | 任务二 已做任务 - + 空格 + [x] | . 图片 . Markdown 语法： . ![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif) 格式: ![Alt Text](url) . 效果如下： . . 链接 . Markdown 语法： . email &lt;example@example.com&gt; [GitHub](http://github.com) 自动生成连接 &lt;http://www.github.com/&gt; . 效果如下： . Email 连接： example@example.com 连接标题Github网站 自动生成连接像： http://www.github.com/ 这样 . 区块引用 . Markdown 语法： . 某某说: &gt; 第一行引用 &gt; 第二行费用文字 . 效果如下： . 某某说: . 第一行引用 第二行费用文字 . 行内代码 . Markdown 语法： . 像这样即可：`&lt;addr&gt;` `code` . 效果如下： . 像这样即可：&lt;addr&gt; code . 多行或者一段代码 . Markdown 语法： . js function fancyAlert(arg) { if(arg) { $.facebox({div:&#39;#foo&#39;}) } } . 效果如下： . function fancyAlert(arg) { if(arg) { $.facebox({div:&#39;#foo&#39;}) } } . 表格 . Markdown 语法： . 第一格表头 | 第二格表头 | - 内容单元格 第一列第一格 | 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 . 效果如下： . 第一格表头 第二格表头 . 内容单元格 第一列第一格 | 内容单元格第二列第一格 | . 内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 | . 删除线 . Markdown 语法： . 加删除线像这样用： 删除这些 . 效果如下： . 加删除线像这样用： 删除这些 . 分隔线 . 以下三种方式都可以生成分隔线： . *** ***** - - - . 效果如下： . . . . MathJax . Markdown 语法： . 块级公式： $$ x = frac{-b pm sqrt{b^2 - 4ac}}{2a} $$ [ frac{1}{ Bigl( sqrt{ phi sqrt{5}}- phi Bigr) e^{ frac25 pi}} = 1+ frac{e^{-2 pi}} {1+ frac{e^{-4 pi}} {1+ frac{e^{-6 pi}} {1+ frac{e^{-8 pi}} {1+ ldots} } } } ] 行内公式： $$ Gamma(n) = (n-1)! quad forall n in mathbb N$$ . 在 _config.yml 中设置 use_math: true 可开启渲染数学公式 . 块级公式： . x=−b±b2−4ac2ax = frac{-b pm sqrt{b^2 - 4ac}}{2a}x=2a−b±b2−4ac . ​​ . [ frac{1}{ Bigl( sqrt{ phi sqrt{5}}- phi Bigr) e^{ frac25 pi}} = 1+ frac{e^{-2 pi}} {1+ frac{e^{-4 pi}} {1+ frac{e^{-6 pi}} {1+ frac{e^{-8 pi}} {1+ ldots} } } } ] . 行内公式： Γ(n)=(n−1)!∀n∈N Gamma(n) = (n-1)! quad forall n in mathbb NΓ(n)=(n−1)!∀n∈N . . 在本地测试时可能会遇到数学公式渲染出错的情况 脚注（Footnote） . Markdown 语法： . 这是一个脚注：[^sample_footnote] . 效果如下： . 这是一个脚注：1 . . 以上内容引用自MWeb . 除了标准markdown格式，fastpages还允许你增添一些额外的内容。 . 图片与图注 . 如果你想显示本地图片，可将图片放入 images 文件夹中，然后用 /blog/images 表示图片路径，同时你可以仿照下面格式显示图注 . ![](/blog/images/logo.png &quot;fast.ai&#39;s logo&quot;) . . Tweet 卡片 . 请查看原md文档以了解如何使用该功能 . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Boxes / Callouts . 请查看原md文档以了解如何使用该功能 . . You can include alert boxes . You can include info boxes FrontMatter . FrontMatter 相当于每篇博文的配置文件，它控制着每篇博文该如何展现内容。 在 markdown 博文中，我们会将 FrontMatter 写在文章的开头 . title: &quot;My Title&quot; summary: &quot;Awesome summary&quot; toc: false comments: true image: images/some_folder/your_image.png hide: false search_exclude: true categories: [fastpages, jupyter] metadata_key1: metadata_value1 metadata_key2: metadata_value2 . FrontMatter允许用户自定义额外选项，但必须遵守YAML格式规则。 . 可以访问 fastpages 主页 了解更多内容 . 这里是脚注信息 &#8617; . |",
            "url": "https://invisprints.github.io/blog/markdown/2020/04/04/markdown-tutorial.html",
            "relUrl": "/markdown/2020/04/04/markdown-tutorial.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://invisprints.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://invisprints.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "🥳About Me",
          "content": "研究生·深度学习&amp;NAS·Fastai·二次元·沉迷研究各种无用工具和学习方法 .",
          "url": "https://invisprints.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}