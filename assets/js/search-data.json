{
  
    
        "post0": {
            "title": "LSTM 模型预测 A 股走势",
            "content": "LSTM &#27169;&#22411;&#39044;&#27979; A &#32929;&#36208;&#21183; . 这几天闲来无事，看网上很多人都在评论股市的起起伏伏，于是心血来潮，想用深度学习看看能否预测股票走势。由于之前研究方向都是 CV 和 NAS，也想借用这个机会深入了解下 RNN 这个派系是怎么回事。 . 数日后 . . 经过我多日的观察，LSTM 似乎并不能预测 A 股走势。当然由于我在这方面还是初学者，所以代码有可能存在问题，欢迎大家指出！ . &#19979;&#36733;&#25968;&#25454;&#38598; . 证券宝 www.baostock.com 是一个免费、开源的证券数据平台（无需注册）。其优点请访问官网 . 取消下面代码注释来安装 baostock 库 . # !pip install baostock -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn . 按照官网教程下载一只股票的k线数据，这里取sz.002648 15年以后的数据。 . import baostock as bs import pandas as pd #### 登陆系统 #### lg = bs.login() #### 获取沪深A股历史K线数据 #### # 详细指标参数，参见“历史行情指标参数”章节；“分钟线”参数与“日线”参数不同。 # 分钟线指标：date,time,code,open,high,low,close,volume,amount,adjustflag rs = bs.query_history_k_data_plus(&quot;sz.002648&quot;, &quot;date,code,open,high,low,close,preclose,volume,amount,adjustflag,turn,tradestatus,pctChg,isST&quot;, start_date=&#39;2015-01-01&#39;, end_date=&#39;2020-4-14&#39;, frequency=&quot;d&quot;, adjustflag=&quot;3&quot;) #### 打印结果集 #### data_list = [] while (rs.error_code == &#39;0&#39;) &amp; rs.next(): # 获取一条记录，将记录合并在一起 data_list.append(rs.get_row_data()) df = pd.DataFrame(data_list, columns=rs.fields) #### 结果集输出到csv文件 #### # result.to_csv(&quot;D: history_A_stock_k_data.csv&quot;, index=False) print(df) #### 登出系统 #### bs.logout() . login success! date code open high low close preclose 0 2015-01-05 sz.002648 12.0400 12.4700 11.8000 12.2200 12.1000 1 2015-01-06 sz.002648 12.2000 12.3600 12.0000 12.2900 12.2200 2 2015-01-07 sz.002648 12.2900 12.5600 12.2500 12.4000 12.2900 3 2015-01-08 sz.002648 12.4300 12.6300 12.3000 12.4700 12.4000 4 2015-01-09 sz.002648 12.4600 12.7400 12.3900 12.4100 12.4700 ... ... ... ... ... ... ... ... 1281 2020-04-08 sz.002648 13.7400 14.1200 13.6500 13.9700 13.8400 1282 2020-04-09 sz.002648 14.0800 14.2900 14.0300 14.1800 13.9700 1283 2020-04-10 sz.002648 14.0500 14.0500 13.5400 13.7600 14.1800 1284 2020-04-13 sz.002648 14.1900 15.1400 14.0000 14.9600 13.7600 1285 2020-04-14 sz.002648 15.0600 15.2000 14.8000 14.8900 14.9600 volume amount adjustflag turn tradestatus pctChg 0 16718083 201474357.0000 3 2.089760 1 0.991700 1 7965196 97122442.0000 3 0.995649 1 0.572800 2 7684398 95370790.0000 3 0.960550 1 0.895000 3 8056201 100447582.0000 3 1.007025 1 0.564500 4 7648582 96383568.0000 3 0.956073 1 -0.481200 ... ... ... ... ... ... ... 1281 15477705 214734917.0800 3 1.490800 1 0.939300 1282 16011717 226975113.8300 3 1.542300 1 1.503200 1283 17320147 238855999.3500 3 1.669400 1 -2.961900 1284 56552045 834440561.6200 3 5.450700 1 8.720900 1285 42736530 638906444.8700 3 4.119100 1 -0.467900 isST 0 0 1 0 2 0 3 0 4 0 ... ... 1281 0 1282 0 1283 0 1284 0 1285 0 [1286 rows x 14 columns] logout success! . &lt;baostock.data.resultset.ResultData at 0x11cdb33d0&gt; . 下载的数据都是以字符串形式保存的，我们把需要的数据转换成整数和浮点数 . float_type = [&#39;open&#39;,&#39;high&#39;,&#39;low&#39;,&#39;close&#39;,&#39;preclose&#39;,&#39;amount&#39;,&#39;pctChg&#39;] for item in float_type: df[item] = df[item].astype(&#39;float&#39;) df[&#39;amount&#39;] = df[&#39;amount&#39;].astype(&#39;int&#39;) df[&#39;volume&#39;] = df[&#39;volume&#39;].astype(&#39;int&#39;) df[&#39;turn&#39;] = [0 if x == &quot;&quot; else float(x) for x in df[&quot;turn&quot;]] df[&#39;buy_flag&#39;] = 10 # df.tail() . &#22788;&#29702;&#25968;&#25454;&#38598; . 用 LSTM 预测价格显示是不合理的，因为价格的波动非常不可控，所以我们退而求其次，预测股票的走势，即涨还是跌。 . 但是怎么量化股票的涨跌是个问题，本人之前完全没接触过股票，所以这里就想当然用未来数天的平均股价表示股票的起伏。 . #未来n天移动平均，包含今天 def MA_next(df, date_idx, price_type, n): return df[price_type][date_idx:date_idx+n].mean() . 假设短期2天，中期6天，长期15天。如果未来15天平均价格大于未来6天平均价格大于未来2天平均价格，我们就可认为未来15天的股市走势很好。 这里还要求有3%的涨幅，能一定程度上减少标签频繁波动。 . &#39;2&#39;含义为买入，&#39;0&#39;含义为卖出，&#39;1&#39;为默认值 . s_time = 2 m_time = 6 l_time = 15 for i in range(len(df)-l_time): if MA_next(df,i,&#39;close&#39;,l_time)&gt;MA_next(df,i,&#39;close&#39;,m_time)*1.03&gt;MA_next(df,i,&#39;close&#39;,s_time)*1.03: df.loc[i, &#39;buy_flag&#39;] = 2 elif MA_next(df,i,&#39;close&#39;,s_time)&gt;MA_next(df,i,&#39;close&#39;,m_time): df.loc[i, &#39;buy_flag&#39;] = 0 else: df.loc[i, &#39;buy_flag&#39;] = 1 df.loc[i, &#39;buy_flag&#39;] = 1 + (MA_next(df,i,&#39;close&#39;,m_time)-MA_next(df,i,&#39;close&#39;,s_time))/MA_next(df,i,&#39;close&#39;,s_time) # df.loc[i, &#39;buy_flag&#39;] = 10*(MA_next(df,i,&#39;close&#39;,m_time)+MA_next(df,i,&#39;close&#39;,l_time)-2*MA_next(df,i,&#39;close&#39;,s_time))/MA_next(df,i,&#39;close&#39;,s_time) df.tail() . date code open high low close preclose volume amount adjustflag turn tradestatus pctChg isST buy_flag . 1281 2020-04-08 | sz.002648 | 13.74 | 14.12 | 13.65 | 13.97 | 13.84 | 15477705 | 214734917 | 3 | 1.4908 | 1 | 0.9393 | 0 | 10.0 | . 1282 2020-04-09 | sz.002648 | 14.08 | 14.29 | 14.03 | 14.18 | 13.97 | 16011717 | 226975113 | 3 | 1.5423 | 1 | 1.5032 | 0 | 10.0 | . 1283 2020-04-10 | sz.002648 | 14.05 | 14.05 | 13.54 | 13.76 | 14.18 | 17320147 | 238855999 | 3 | 1.6694 | 1 | -2.9619 | 0 | 10.0 | . 1284 2020-04-13 | sz.002648 | 14.19 | 15.14 | 14.00 | 14.96 | 13.76 | 56552045 | 834440561 | 3 | 5.4507 | 1 | 8.7209 | 0 | 10.0 | . 1285 2020-04-14 | sz.002648 | 15.06 | 15.20 | 14.80 | 14.89 | 14.96 | 42736530 | 638906444 | 3 | 4.1191 | 1 | -0.4679 | 0 | 10.0 | . &#21487;&#35270;&#21270; . 使用 plotly 绘图 . import plotly.graph_objects as go # from IPython.display import HTML import chart_studio.plotly as py fig = go.Figure(data=[go.Candlestick(x=df[&#39;date&#39;], open=df[&#39;open&#39;], high=df[&#39;high&#39;], low=df[&#39;low&#39;], close=df[&#39;close&#39;], increasing_line_color= &#39;red&#39;, decreasing_line_color= &#39;green&#39;) ]) fig.add_trace(go.Scatter(x=df[&#39;date&#39;],y=df[&#39;buy_flag&#39;], name=&#39;Flag&#39;)) fig.update_layout( xaxis_range=[&#39;2017-01-01&#39;,&#39;2019-12-31&#39;], yaxis_title=&#39;Price&#39;, # xaxis_rangeslider_visible=False, ) py.iplot(fig, filename=&quot;stock-price&quot;) . 在 Fast.ai Part 1 课程中，提到一个能扩展日期特征的函数add_datepart，该函数能计算当前日期的年、月、日、一周第几天、周数、月初月末、一年当中的第几天等信息。我们用该函数扩展日期特征。 . # 增加日期特征 from fastai.tabular import * add_datepart(df, &quot;date&quot;, drop=False) seq_length = 90 train_df = df[seq_length:-seq_length] # 丢掉不重要的特征 train_df = train_df.drop([&#39;date&#39;,&#39;code&#39;,&#39;Is_month_end&#39;, &#39;Is_month_start&#39;, &#39;Is_quarter_end&#39;, &#39;Is_quarter_start&#39;, &#39;Is_year_end&#39;, &#39;Is_year_start&#39;,&#39;Dayofyear&#39;],axis=1) train_df . open high low close preclose volume amount adjustflag turn tradestatus pctChg isST buy_flag Year Month Week Day Dayofweek Elapsed . 90 16.15 | 16.85 | 16.07 | 16.28 | 16.19 | 20654461 | 340943328 | 3 | 2.581808 | 1 | 0.5559 | 0 | 2.000000 | 2015 | 5 | 21 | 20 | 2 | 1432080000 | . 91 16.45 | 16.84 | 16.30 | 16.81 | 16.28 | 21049050 | 349775744 | 3 | 2.631131 | 1 | 3.2555 | 0 | 2.000000 | 2015 | 5 | 21 | 21 | 3 | 1432166400 | . 92 16.91 | 17.50 | 16.72 | 17.25 | 16.81 | 26445834 | 455184800 | 3 | 3.305729 | 1 | 2.6175 | 0 | 2.000000 | 2015 | 5 | 21 | 22 | 4 | 1432252800 | . 93 17.20 | 17.72 | 16.93 | 17.52 | 17.25 | 25543119 | 444374592 | 3 | 3.192890 | 1 | 1.5652 | 0 | 1.070076 | 2015 | 5 | 22 | 25 | 0 | 1432512000 | . 94 17.78 | 17.82 | 17.26 | 17.68 | 17.52 | 23197897 | 407829184 | 3 | 2.899737 | 1 | 0.9132 | 0 | 1.031780 | 2015 | 5 | 22 | 26 | 1 | 1432598400 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1191 14.22 | 14.35 | 13.77 | 13.86 | 14.10 | 13857446 | 193912775 | 3 | 1.334800 | 1 | -1.7021 | 0 | 1.014370 | 2019 | 11 | 47 | 22 | 4 | 1574380800 | . 1192 13.92 | 14.62 | 13.91 | 14.44 | 13.86 | 33019563 | 474715627 | 3 | 3.180500 | 1 | 4.1847 | 0 | 1.012324 | 2019 | 11 | 48 | 25 | 0 | 1574640000 | . 1193 14.47 | 14.56 | 14.23 | 14.23 | 14.44 | 14896110 | 213625282 | 3 | 1.434800 | 1 | -1.4543 | 0 | 1.028050 | 2019 | 11 | 48 | 26 | 1 | 1574726400 | . 1194 14.18 | 14.54 | 14.01 | 14.29 | 14.23 | 16550049 | 236702541 | 3 | 1.594100 | 1 | 0.4216 | 0 | 1.031558 | 2019 | 11 | 48 | 27 | 2 | 1574812800 | . 1195 14.28 | 14.76 | 14.21 | 14.44 | 14.29 | 16324504 | 236742107 | 3 | 1.572400 | 1 | 1.0497 | 0 | 1.021047 | 2019 | 11 | 48 | 28 | 3 | 1574899200 | . 1106 rows × 19 columns . 接下来我们为数据生成序列，用前seq_length天的信息作为输入序列，后1天的股市起伏buy_flag作为标签 . def sliding_windows(data, label, seq_length): x = [] y = [] for i in range(len(data)-seq_length-1): _x = data[i:(i+seq_length)] _y = label[i+seq_length] x.append(_x) y.append(_y) return np.array(x),np.array(y) . 在 Pytorch 中，LSTM 默认的输入顺序是 seq_length*batch_size*feature，而我们通常生成的序列是batch_size*seq_length*feature，因此需要交换下输入数据纬度。 . from sklearn.preprocessing import MinMaxScaler import numpy as np y_scaler = MinMaxScaler() x_scaler = MinMaxScaler() #converting dataset into x_train and y_train X = train_df.drop([&#39;buy_flag&#39;],axis=1).values X = x_scaler.fit_transform(X) Y = train_df[&#39;buy_flag&#39;] Y = np.array(Y).reshape(-1,1) Y = y_scaler.fit_transform(Y) x, y = sliding_windows(X, Y, seq_length) y_train,y_test = y[:int(y.shape[0]*0.8)],y[int(y.shape[0]*0.8):] x_train,x_test = x[:int(x.shape[0]*0.8)],x[int(x.shape[0]*0.8):] # lstm: seq, batch, feature device = torch.device(&quot;cuda:0&quot; if torch.cuda.is_available() else &quot;cpu&quot;) dataX = torch.Tensor(x.transpose(1,0,2)) dataY = torch.Tensor(y) trainX = torch.Tensor(x_train.transpose(1,0,2)) trainY = torch.Tensor(y_train) testX = torch.Tensor(x_test.transpose(1,0,2)) testY = torch.Tensor(y_test) trainX.shape, trainY.shape . (torch.Size([90, 812, 18]), torch.Size([812, 1])) . &#24314;&#31435; LSTM &#27169;&#22411; . class LSTM(nn.Module): def __init__(self, num_classes, input_size, hidden_size, num_layers): super(LSTM, self).__init__() self.num_classes = num_classes self.num_layers = num_layers self.input_size = input_size self.hidden_size = hidden_size self.seq_length = seq_length self.lstm = nn.LSTM(input_size=input_size, hidden_size=hidden_size, num_layers=num_layers) self.fc = nn.Linear(hidden_size, num_classes) def forward(self, x): # 不手动指定 h 和 c 的话，默认就是 0 # h_0 = torch.zeros( # self.num_layers, x.size(0), self.hidden_size) # c_0 = torch.zeros( # self.num_layers, x.size(0), self.hidden_size) # Propagate input through LSTM # ula, (h_out, _) = self.lstm(x, (h_0, c_0)) ula, (h_out, _) = self.lstm(x) h_out = h_out.view(-1, self.hidden_size) out = self.fc(h_out) return out . &#35757;&#32451;&#27169;&#22411; . num_epochs = 15 learning_rate = 0.001 input_size = train_df.shape[1]-1 # The number of expected features in the input x hidden_size = 300 # The number of features in the hidden state h num_layers = 1 # Number of recurrent layers. num_classes = 1 # output lstm = LSTM(num_classes, input_size, hidden_size, num_layers) criterion = torch.nn.MSELoss() # mean-squared error for regression optimizer = torch.optim.Adam(lstm.parameters(), lr=learning_rate) #optimizer = torch.optim.SGD(lstm.parameters(), lr=learning_rate) # Train the model lstm.train() lstm.to(device) trainX = trainX.to(device) for epoch in range(num_epochs): optimizer.zero_grad() outputs = lstm(trainX) # obtain the loss function loss = criterion(outputs, trainY) loss.backward() optimizer.step() print(&quot;Epoch: %d, loss: %1.5f&quot; % (epoch, loss.item())) . Epoch: 0, loss: 0.22898 Epoch: 1, loss: 0.17325 Epoch: 2, loss: 0.14031 Epoch: 3, loss: 0.13380 Epoch: 4, loss: 0.14764 Epoch: 5, loss: 0.14571 Epoch: 6, loss: 0.13712 Epoch: 7, loss: 0.13153 Epoch: 8, loss: 0.12988 Epoch: 9, loss: 0.13052 Epoch: 10, loss: 0.13184 Epoch: 11, loss: 0.13284 Epoch: 12, loss: 0.13308 Epoch: 13, loss: 0.13251 Epoch: 14, loss: 0.13131 . &#26597;&#30475;&#35757;&#32451;&#25928;&#26524; . # 将数据集中的所有切片以序列的方式进行预测，查看预测结果与真实值的拟合情况。 import plotly.graph_objects as go lstm.eval() lstm.to(torch.device(&#39;cpu&#39;)) with torch.no_grad(): dataY_pred = lstm(dataX) dataY_pred = dataY_pred.data.numpy() dataY_truth = dataY.data.numpy() dataY_pred = y_scaler.inverse_transform(dataY_pred) dataY_truth = y_scaler.inverse_transform(dataY_truth) fig = go.Figure(go.Scatter(y=dataY_truth.flatten(),name=&#39;Ground Truth&#39;)) fig.add_trace(go.Scatter(y=dataY_pred.flatten(),name=&#39;Predicted&#39;)) fig.update_layout( shapes = [dict( x0=len(x_train), x1=len(x_train), y0=0, y1=1, xref=&#39;x&#39;, yref=&#39;paper&#39;, line_width=2)], #在图上划分训练集和测试集 xaxis_rangeslider_visible=True, ) py.iplot(fig, filename=&quot;stock-result&quot;) . 发现预测值基本取标签的平均值，也就是说它并不会根据输入调整输出，而是直接输出标签的平均值，没有任何参考价值 . #随机从测试集中抽取一个单一数据切片进行预测 import random i = random.randint(0,testX.shape[1]) with torch.no_grad(): y_pred = lstm(testX[:,i,::].reshape(testX.shape[0],1,testX.shape[2])) print(&#39;预测值:{0}, 实际值:{1}&#39;.format(y_pred.data.numpy(),testY[i].reshape(-1,1))) . 预测值:[[0.288591]], 实际值:tensor([[1.]]) . &#21442;&#32771;&#36164;&#26009; . 超生动图解LSTM和GPU，一文读懂循环神经网络！ . LSTM细节分析理解（pytorch版） .",
            "url": "https://invisprints.github.io/blog/pytorch/stock/lstm/2020/04/17/LSTM-stock.html",
            "relUrl": "/pytorch/stock/lstm/2020/04/17/LSTM-stock.html",
            "date": " • Apr 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "subconverter 实用案例",
            "content": "subconverter . subconverter 是在各种订阅格式之间进行转换的实用程序 . github 项目地址 . 公共 API . 常用案例 . 关于 subconverter 的用法在 readme 中已经给出详细的说明与部分简单用法了，本文将继续扩充一些 readme 中没有涉及到的 example。 . 云端运行 . readme 中介绍了大量本地运行的情况，但是对于众多用户来说我们并不希望在本地一直运行着 subconverter，我们希望有个云端 API。每当我们更新云端数据时，所有的更新就会自动 update 到我们的手机、电脑、路由器中，十分方便。 . 最简单的方法是使用公共 API，但有些人担心隐私机场泄漏问题，因此我们需要自己搭建一个云端转换器。 . Heroku 是一个在云端部署 web app 的平台，它托管于 Amazon 云且与 Github 深度集成。 subconverter 作者也提供了一键部署到 Herokuapp 的模版 heroku-subconverter，这里你可以一键部署到你的 Heroku 平台上，然后就可以使用 subconverter readme 中的简易用法。 . 但简易用法的链接通常十分冗长且难以记忆，在出现这种情况后，我们就需要利用 subconverter 提供的配置档案简化操作 . . step 1 既然需要用到配置档案，我们自然就不能使用 heroku 一键部署的功能（不然怎么添加本地文件？）。在heroku-subconverter页面，点击 use this template 将该模版 copy 自己的仓库下，这里建议将仓库权限设置为 Private，不然全世界人们都可以看见你的配置档案了。 . step 2 所有的配置档案都应保存在 base 文件夹中。但目前该版本51f4b54不支持 base 中包含其它子文件夹，如果你希望在里面添加其它子文件夹，需要修改 Dockerfile 中COPY base/* /base/成COPY base/ /base/ . step 3 根据你的喜好在 base 中添加相应的配置档案。 配置档案参照subconverter 说明进行配置。 . . 建议在本地调试好后再上传云端。 step 4 在 heroku 中关联你的 GitHub 账户。新建 app 后将此 app 关联到你在 step 1 中新建的仓库，这样你有什么修改都能轻松同步到 heroku 中。 进行完相关设置后点击 deploy，不一会儿你将用有云端转换程序。 . step 5 至此部署云端 API 基本完成，这里有几个注意事项。 . 云端的根目录就是 base 目录。比如你在 base 下有一个example_profile.ini配置文件，路径就是https://***.herokuapp.com/getprofile?name=example_profile.ini&amp;token=*** | 需修改你在pref.ini的managed_config_prefix路径，将其指向云端路径 | 为了安全考虑，建议修改token默认密码 | 订阅时直接在订阅链接里输入云端 API 地址即可，如https://***.herokuapp.com/getprofile?name=example_profile.ini&amp;token=*** | 你可以建立多个配置文件，让不同软件使用不同配置文件。 | . 自定义规则 . 在 subconverter 说明文档中对自定义规则有少许描述，这里给出一个完整的自定义规则配置过程。 subconverter 的默认配置规则为神机规则，里面包含了大量与广告相关的规则。下面我们就以去除神机规则中的广告拦截规则为例。 . 在配置档案中，我们可以通过添加config参数加载额外的配置文件。当然我们也可以通过直接修改 pref.ini 实现。 . [Profile] target=clash url=ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpwYXNzd29yZA@www.example.com:1080#Example ; 加载位于 config/example_external_config.ini 的配置文件 config=config/example_external_config.ini . 仿照默认的配置文件编辑自定义配置文件，默认配置文件在pref.ini由surge_ruleset和custom_proxy_group指出 . [custom] ; 自定义策略组 custom_proxy_group=🔰 节点选择`select`[]♻️ 自动选择`[]🎯 全球直连`.* custom_proxy_group=♻️ 自动选择`url-test`.*`http://www.gstatic.com/generate_204`300 custom_proxy_group=🌍 国外媒体`select`[]🔰 节点选择`[]♻️ 自动选择`[]🎯 全球直连`.* custom_proxy_group=🌏 国内媒体`select`[]🎯 全球直连`[]🔰 节点选择 custom_proxy_group=Ⓜ️ 微软服务`select`[]🎯 全球直连`[]🔰 节点选择`.* custom_proxy_group=📲 电报信息`select`[]🔰 节点选择`[]🎯 全球直连`.* custom_proxy_group=🍎 苹果服务`select`[]🔰 节点选择`[]🎯 全球直连`[]♻️ 自动选择`.* custom_proxy_group=🎯 全球直连`select`[]DIRECT custom_proxy_group=🐟 漏网之鱼`select`[]🎯 全球直连`[]🔰 节点选择`[]♻️ 自动选择`.* ;Options for custom rulesets ; 自定义规则片段 enable_rule_generator=true overwrite_original_rules=false surge_ruleset=🎯 全球直连,rules/LocalAreaNetwork.list surge_ruleset=Ⓜ️ 微软服务,rules/MSServices.list surge_ruleset=🎯 全球直连,rules/ConnersHua/Surge/Ruleset/Unbreak.list surge_ruleset=🌍 国外媒体,rules/ConnersHua/Surge/Ruleset/GlobalMedia.list surge_ruleset=🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/AsianTV.list surge_ruleset=📲 电报信息,rules/ConnersHua/Surge/Ruleset/Telegram.list surge_ruleset=🔰 节点选择,rules/ConnersHua/Surge/Ruleset/Global.list surge_ruleset=🍎 苹果服务,rules/ConnersHua/Surge/Ruleset/Apple.list surge_ruleset=🎯 全球直连,rules/ConnersHua/Surge/Ruleset/China.list surge_ruleset=🎯 全球直连,rules/NobyDa/Surge/Download.list surge_ruleset=🎯 全球直连,[]GEOIP,CN surge_ruleset=🐟 漏网之鱼,[]FINAL . 至此在调用配置档案时，会调用自定义配置档案并覆盖掉原始配置档案。 . 小结 . subconverter 还有很多高级玩法，这篇文章只是抛砖引玉补充一些基础自定义案例，方便读者了解部分高级 API 的使用。 . 最近 subconverter 0.5 引入强大的模版功能，但同样缺少完整的使用教程。由于笔者精力有限+上述功能已满足自身需要，因此暂不研究如何使用模版。 .",
            "url": "https://invisprints.github.io/blog/subconverter/heroku/2020/04/12/subconverter-example.html",
            "relUrl": "/subconverter/heroku/2020/04/12/subconverter-example.html",
            "date": " • Apr 12, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "更新 fastpages 框架",
            "content": "fastpages . fastpages 是一个在开发中的博客平台，因此会不断有新功能出现或修复现有的bug。fastpages 提供了 2 种更新方法，适用于新手的自动化更新和适用于自定义玩家的手动更新。 . 本文参考 Upgrading fastpages . 自动更新 . . Important: 自动更新适合那些没有修改网站 HTML 的博客。 第一步：使用 Upgrade Template 提出 Issue . 在你的博客 repo 中点击 New issue，并点击显示 [fastpages] Automated Upgrade 的 Get Started 按钮。 . 第二步: 点击 Submit new issue 按钮 . 不要对页面做任何改动 . 第三步: 查看自动生成的 PR . 接下来 GitHub 会打开 PR 自动更新，PR 界面如下 . 此时可能会报 error，通常的原因有如下几点： . - 已是最新版，error 上会显示 &quot;nothing to commit&quot;. - 之前有未合并的自动更新 PR 请求 . 你可以在 fastai 社区 提问。 . 第四步: 检查并合并 PR . 仔细检查 PR 中修改的文件，确保你自定义的部分没有被修改。之后点击Merge pull request 更新 fastpages。 | 如果 PR 中修改了你自定义的部分或不想被改动的部分，请采用手动更新。 | . 手动更新 . . 手动更新适合那些修改过网站 HTML 的博客。 直接在 GitHub 网页上修改 . 进行到自动更新的第四步之后，如果你发现 PR 中修改了你不想修改的内容，可以直接在 Files changed 标签页中修改 PR 内容，修改完成后等待 GitHub 冲突检查，解决完可能存在的冲突或失败之后就可以点击Merge pull request 更新 fastpages。 . clone 到本地解决 . 参考 GitHub - Pull changes from a template repository 和 How to sync fastai/fastpages with forked FastPages . 第一步 . 添加远程模版库 . $ git remote add template git@github.com:fastai/fastpages.git $ git remote -v origin git@github.com:byteshiva/blog.git (fetch) origin git@github.com:byteshiva/blog.git (push) template git@github.com:fastai/fastpages.git (fetch) template git@github.com:fastai/fastpages.git (push) upstream git@github.com:fastai/fastpages.git (fetch) upstream git@github.com:fastai/fastpages.git (push) . 第二步 . 更新 . $ git fetch --all Fetching origin remote: Enumerating objects: 43, done. remote: Counting objects: 100% (43/43), done. remote: Compressing objects: 100% (11/11), done. remote: Total 26 (delta 9), reused 24 (delta 7), pack-reused 0 Unpacking objects: 100% (26/26), done. From github.com:byteshiva/blog d7e8201..b67202a gh-pages -&gt; origin/gh-pages Fetching upstream remote: Enumerating objects: 86, done. remote: Counting objects: 100% (86/86), done. remote: Compressing objects: 100% (54/54), done. remote: Total 86 (delta 38), reused 64 (delta 27), pack-reused 0 Unpacking objects: 100% (86/86), done. From github.com:fastai/fastpages e8bf9f8..bcdbc22 gh-pages -&gt; upstream/gh-pages 5b4b79e..8f5a7bc master -&gt; upstream/master Fetching template From github.com:fastai/fastpages * [new branch] change-docker -&gt; template/change-docker * [new branch] gh-pages -&gt; template/gh-pages * [new branch] master -&gt; template/master * [new branch] pin-jekyll-version -&gt; template/pin-jekyll-version * [new branch] search-highlight -&gt; template/search-highlight . 第三步 . 合并 . $ git merge template/master fatal: refusing to merge unrelated histories . 如果出现 fatal: refusing to merge unrelated histories，则需要允许不关联的git 历史，参照第四步 . 第四步 . $ git merge template/master --allow-unrelated-histories CONFLICT (add/add): Merge conflict in index.md Auto-merging index.md CONFLICT (add/add): Merge conflict in assets/main.scss Auto-merging assets/main.scss CONFLICT (add/add): Merge conflict in assets/js/search.js Auto-merging assets/js/search.js CONFLICT (add/add): Merge conflict in _posts/2020-01-14-test-markdown-post.md Auto-merging _posts/2020-01-14-test-markdown-post.md CONFLICT (add/add): Merge conflict in _notebooks/2020-02-20-test.ipynb Auto-merging _notebooks/2020-02-20-test.ipynb CONFLICT (add/add): Merge conflict in _includes/youtube.html Auto-merging _includes/youtube.html CONFLICT (add/add): Merge conflict in _includes/twitter.html Auto-merging _includes/twitter.html CONFLICT (add/add): Merge conflict in _includes/notebook_github_link.html Auto-merging _includes/notebook_github_link.html CONFLICT (add/add): Merge conflict in _includes/notebook_colab_link.html Auto-merging _includes/notebook_colab_link.html CONFLICT (add/add): Merge conflict in _includes/favicons.html Auto-merging _includes/favicons.html CONFLICT (add/add): Merge conflict in _config.yml Auto-merging _config.yml CONFLICT (add/add): Merge conflict in _action_files/settings.ini Auto-merging _action_files/settings.ini CONFLICT (add/add): Merge conflict in _action_files/nb2post.py Auto-merging _action_files/nb2post.py CONFLICT (add/add): Merge conflict in _action_files/action_entrypoint.sh Auto-merging _action_files/action_entrypoint.sh CONFLICT (add/add): Merge conflict in README.md Auto-merging README.md CONFLICT (add/add): Merge conflict in Makefile Auto-merging Makefile CONFLICT (add/add): Merge conflict in .github/workflows/setup.yaml Auto-merging .github/workflows/setup.yaml CONFLICT (add/add): Merge conflict in .github/workflows/ci.yaml Auto-merging .github/workflows/ci.yaml Automatic merge failed; fix conflicts and then commit the result. . 第五步 . 显示冲突文件 参考 List conflicted files in git . git diff --name-only --diff-filter=U .github/workflows/ci.yaml .github/workflows/setup.yaml Makefile README.md _action_files/action_entrypoint.sh _action_files/nb2post.py _action_files/settings.ini _config.yml _includes/favicons.html _includes/notebook_colab_link.html _includes/notebook_github_link.html _includes/twitter.html _includes/youtube.html _notebooks/2020-02-20-test.ipynb _posts/2020-01-14-test-markdown-post.md assets/js/search.js assets/main.scss index.md . 第六步 . 用你擅长的方式解决冲突 . 第七步 . 合并并提交更新 . git add . git commit -m &quot; commit message comes here &quot; .",
            "url": "https://invisprints.github.io/blog/fastpages/2020/04/08/fastpages-upgrade.html",
            "relUrl": "/fastpages/2020/04/08/fastpages-upgrade.html",
            "date": " • Apr 8, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "fastpages 介绍 & 搭建教程",
            "content": ". 本文参考Introducing fastpages，并从中节选部分转述成中文。感谢 Jeremy Howard 和 Hamel Husain 的辛苦付出！ . fastpages 是一个能让你在 GitHub 上创建免费博客的平台，它没有广告且附带许多其它实用功能。 . 能直接将Jupyter Notebooks转换成博文，包含输入和输出代码，且输出代码可以是可交互的。可以查看 Scott Hawley 写的这篇范例博文以了解详情。fastpages支持Notebook的如下特性： Altair创建的交互可视化图形 | 隐藏或显示输入输出代码 | 折叠code cell | 通过markdown格式定义文章标题、摘要和其它元信息 | 跳转到 Colab 和 GitHub 的标签栏 | . | 转换 Microsoft Word 到博文 | 使用GitHub内置的markdown编辑器在线创建或编辑 Markdown 博文 | 内嵌 Twitter 卡片和 YouTube 视频 | 供分类查找的标签系统 | 更多…… | . fastpages 依赖 Github pages 托管和 Github Actions 搭建自动搭建博客平台。通常初始化只需数分钟，并不需要相应的专业知识。对于普通人员，你只需将你的Jupyter notebook, Word 文档或者 markdown 文件保存在相应目录即可，剩下的就由 fastpages 帮你自动完成。这篇文章就是由 Jupyter Notebook 编写而成，你可以点击博文开头的 View on GitHub 查看 . Fastpages &#25645;&#24314;&#65288;&#21021;&#22987;&#21270;&#65289; . fastpages初始化过程 基本由 GitHub Actions 自动完成。你只需在fastpages github上点击 use this temple。在模版建立完成后，大约 30s 就会出现一条 pull requests。按照上面的提示配置你的博客。自动生成的 pull request 长下面这样，上面有英文指导步骤，一步一步按着做即可。 . . 你只需要按部就班完成 pull request 上要求的操作，等待不到半小时即可拥有你自己的博客平台。整个初始化过程不到一小时。 . 下面参考Jupyter 博文发布教程和Markdown 博文发布教程开始你的第一篇博文吧！ .",
            "url": "https://invisprints.github.io/blog/fastpages/jupyter/2020/04/07/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/04/07/introducing-fastpages.html",
            "date": " • Apr 7, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Jupyter 博文发布教程",
            "content": "&#22522;&#26412;&#35774;&#32622; . fastpages 会将存放在 _notebooks 中的 jupyter notebook 自动转换成博文，因此你应该将所有的 jupyter notebook 放在该文件夹下。 . fastpages 会将存放在 _post 文件夹内的 markdown 文章和 _word 中的 word 文章自动转换成博文。因此你的博文应该存放在这三个文件夹内。 . 所有的博文遵循同一套命名规范，即 YYYY-MM-DD-filename.ext，如本篇 notebook 教程的文件名为 2020-04-04-jupyter-tutorial.ipynb . FrontMatter . FrontMatter 位于每篇 notebook 中的第一个 cell 中，其作用是每篇博文的配置文件，它控制着每篇博文该如何展现内容。 . markdown # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . 有关 FrontMatter 的详细配置和说明可以参考 fastpages 说明 . &#26684;&#24335; . 本文仅介绍 fapages 中的一些亮点功能，关于 jupyter notebook 的使用请自行寻找相关教程 . 在 cell 开头如果加上 #hide ，fastpages 会隐藏该 cell 的输入和输出 . 在 cell 开头如果加上 #hide_input ，fastpages 会隐藏该 cell 的输入 . 在 cell 开头如果加上 #collapse-hide ，fastpages会默认折叠该细胞，但可以手动展开 . 在 cell 开头如果加上 #collapse-show ，fastpages会默认展开该细胞，但可以手动折叠 . #collapse-hide import pandas as pd import plotly.express as px # from IPython.display import HTML import chart_studio.plotly as py . . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . &#21487;&#35270;&#21270;&#26174;&#31034; . 在 fastpages 官网 中介绍了如何用 Altair 显示可交互图表的操作， 其实不只 Altair， fastapages 支持多种可视化框架。 需要注意的是，在最后显示阶段需要用 HTML(fig.to_html()) 代替平常 fig.show() . plotly . print(px.data.iris.__doc__) px.data.iris().head() . Each row represents a flower. https://en.wikipedia.org/wiki/Iris_flower_data_set Returns: A `pandas.DataFrame` with 150 rows and the following columns: `[&#39;sepal_length&#39;, &#39;sepal_width&#39;, &#39;petal_length&#39;, &#39;petal_width&#39;, &#39;species&#39;, &#39;species_id&#39;]`. . sepal_length sepal_width petal_length petal_width species species_id . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | 1 | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | 1 | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | 1 | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | 1 | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | 1 | . df = px.data.iris() fig = px.scatter(df, x=&quot;sepal_width&quot;, y=&quot;sepal_length&quot;, color=&quot;species&quot;, marginal_y=&quot;rug&quot;, marginal_x=&quot;histogram&quot;) # HTML(fig.to_html()) py.iplot(fig, filename=&quot;tutorial-histogram&quot;) . df = px.data.gapminder() fig = px.scatter(df, x=&quot;gdpPercap&quot;, y=&quot;lifeExp&quot;, animation_frame=&quot;year&quot;, animation_group=&quot;country&quot;, size=&quot;pop&quot;, color=&quot;continent&quot;, hover_name=&quot;country&quot;, facet_col=&quot;continent&quot;, log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90]) # HTML(fig.to_html()) py.iplot(fig, filename=&quot;tutorial-sactter&quot;) . df = px.data.election() fig = px.line_3d(df, x=&quot;Joly&quot;, y=&quot;Coderre&quot;, z=&quot;Bergeron&quot;, color=&quot;winner&quot;, line_dash=&quot;winner&quot;) # HTML(fig.to_html()) py.iplot(fig, filename=&quot;tutorial-line-3d&quot;) . &#22270;&#29255; . 可以用类似 markdown 格式载入本地或远程图片 . ![](my_icons/fastai_logo.png) . . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . GIF &#22270;&#20687; . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . &#22270;&#27880; . 采用以下格式显示图注 . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . &#20854;&#23427;&#20142;&#28857; . Tweet &#21345;&#29255; . 输入 &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 显示如下信息 Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube &#35270;&#39057; . 输入 &gt; youtube: https://youtu.be/XfoYk_Z5AkI 显示如下信息 . Callouts . 输入 &gt; Warning: There will be no second warning! 显示如下信息 . Warning: There will be no second warning! . 输入 &gt; Important: Pay attention! It&#39;s important. 显示如下信息 . Important: Pay attention! It&#8217;s important. . 输入 &gt; Tip: This is my tip. 显示如下信息 . Tip: This is my tip. . 输入 &gt; Note: Take note of this. 显示如下信息 . Note: Take note of this. . &#33050;&#27880; . jupyter notebook 中脚注与 markdown 中的脚注有所区别，详细参见这篇文章 This guide provides more detail about this syntax . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://invisprints.github.io/blog/jupyter/fastpages/2020/04/05/jupyter-tutorial.html",
            "relUrl": "/jupyter/fastpages/2020/04/05/jupyter-tutorial.html",
            "date": " • Apr 5, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "markdown 博文发布教程",
            "content": "基本设置 . fastpages 会将存放在 _post 文件夹内的 markdown 文章自动转换成博文，因此你应该将所有的markdown博文放在该文件夹下。 . fastpages 也会将存放在 _notebooks 中的 jupyter notebook 和 _word 中的 word 文章自动转换成博文。因此你的博文应该存放在这三个文件夹内。 . 所有的博文遵循同一套命名规范，即 YYYY-MM-DD-filename.ext，如本篇 markdown 教程的文件名为 2020-04-04-markdown-tutorial.md . 格式 . markdown 文章格式遵从 markdown 格式，如不了解，请自行搜索相关内容。 . . . 以下内容引用自MWeb 标题 . Markdown 语法： . # 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ###### 第六级标题 `&lt;h6&gt;` . 效果如下： . 第一级标题 &lt;h1&gt; . 第二级标题 &lt;h2&gt; . 第六级标题 &lt;h6&gt; . 强调 . Markdown 语法： . *这些文字会生成`&lt;em&gt;`* _这些文字会生成`&lt;u&gt;`_ **这些文字会生成`&lt;strong&gt;`** __这些文字会生成`&lt;strong&gt;`__ . 效果如下： . 这些文字会生成&lt;em&gt; 这些文字会生成&lt;u&gt; . 这些文字会生成&lt;strong&gt; 这些文字会生成&lt;strong&gt; . 换行 . 四个及以上空格加回车。 . 列表 . 无序列表 . Markdown 语法： . * 项目一 无序列表 `* + 空格键` * 项目二 * 项目二的子项目一 无序列表 `TAB + * + 空格键` * 项目二的子项目二 . 效果如下： . 项目一 无序列表 * + 空格键 | 项目二 | 项目二的子项目一 无序列表 TAB + * + 空格键 | 项目二的子项目二 | . 有序列表 . Markdown 语法： . 1. 项目一 有序列表 `数字 + . + 空格键` 2. 项目二 3. 项目三 1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键` 2. 项目三的子项目二 . 效果如下： . 项目一 有序列表 数字 + . + 空格键 | 项目二 | 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 | 项目三的子项目二 | | 任务列表（Task lists） . Markdown 语法： . - [ ] 任务一 未做任务 `- + 空格 + [ ]` - [x] 任务二 已做任务 `- + 空格 + [x]` . 效果如下： . 任务一 未做任务 - + 空格 + [ ] | 任务二 已做任务 - + 空格 + [x] | . 图片 . Markdown 语法： . ![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif) 格式: ![Alt Text](url) . 效果如下： . . 链接 . Markdown 语法： . email &lt;example@example.com&gt; [GitHub](http://github.com) 自动生成连接 &lt;http://www.github.com/&gt; . 效果如下： . Email 连接： example@example.com 连接标题Github网站 自动生成连接像： http://www.github.com/ 这样 . 区块引用 . Markdown 语法： . 某某说: &gt; 第一行引用 &gt; 第二行费用文字 . 效果如下： . 某某说: . 第一行引用 第二行费用文字 . 行内代码 . Markdown 语法： . 像这样即可：`&lt;addr&gt;` `code` . 效果如下： . 像这样即可：&lt;addr&gt; code . 多行或者一段代码 . Markdown 语法： . js function fancyAlert(arg) { if(arg) { $.facebox({div:&#39;#foo&#39;}) } } . 效果如下： . function fancyAlert(arg) { if(arg) { $.facebox({div:&#39;#foo&#39;}) } } . 表格 . Markdown 语法： . 第一格表头 | 第二格表头 | - 内容单元格 第一列第一格 | 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 . 效果如下： . 第一格表头 第二格表头 . 内容单元格 第一列第一格 | 内容单元格第二列第一格 | . 内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 | . 删除线 . Markdown 语法： . 加删除线像这样用： 删除这些 . 效果如下： . 加删除线像这样用： 删除这些 . 分隔线 . 以下三种方式都可以生成分隔线： . *** ***** - - - . 效果如下： . . . . MathJax . Markdown 语法： . 块级公式： $$ x = frac{-b pm sqrt{b^2 - 4ac}}{2a} $$ [ frac{1}{ Bigl( sqrt{ phi sqrt{5}}- phi Bigr) e^{ frac25 pi}} = 1+ frac{e^{-2 pi}} {1+ frac{e^{-4 pi}} {1+ frac{e^{-6 pi}} {1+ frac{e^{-8 pi}} {1+ ldots} } } } ] 行内公式： $$ Gamma(n) = (n-1)! quad forall n in mathbb N$$ . 在 _config.yml 中设置 use_math: true 可开启渲染数学公式 . 块级公式： . x=−b±b2−4ac2ax = frac{-b pm sqrt{b^2 - 4ac}}{2a}x=2a−b±b2−4ac . ​​ . [ frac{1}{ Bigl( sqrt{ phi sqrt{5}}- phi Bigr) e^{ frac25 pi}} = 1+ frac{e^{-2 pi}} {1+ frac{e^{-4 pi}} {1+ frac{e^{-6 pi}} {1+ frac{e^{-8 pi}} {1+ ldots} } } } ] . 行内公式： Γ(n)=(n−1)!∀n∈N Gamma(n) = (n-1)! quad forall n in mathbb NΓ(n)=(n−1)!∀n∈N . . 在本地测试时可能会遇到数学公式渲染出错的情况 脚注（Footnote） . Markdown 语法： . 这是一个脚注：[^sample_footnote] . 效果如下： . 这是一个脚注：1 . . 以上内容引用自MWeb . 除了标准markdown格式，fastpages还允许你增添一些额外的内容。 . 图片与图注 . 如果你想显示本地图片，可将图片放入 images 文件夹中，然后用 /blog/images 表示图片路径，同时你可以仿照下面格式显示图注 . ![](/blog/images/logo.png &quot;fast.ai&#39;s logo&quot;) . . Tweet 卡片 . 请查看原md文档以了解如何使用该功能 . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Boxes / Callouts . 请查看原md文档以了解如何使用该功能 . . You can include alert boxes . You can include info boxes FrontMatter . FrontMatter 相当于每篇博文的配置文件，它控制着每篇博文该如何展现内容。 在 markdown 博文中，我们会将 FrontMatter 写在文章的开头 . title: &quot;My Title&quot; summary: &quot;Awesome summary&quot; toc: false comments: true image: images/some_folder/your_image.png hide: false search_exclude: true categories: [fastpages, jupyter] metadata_key1: metadata_value1 metadata_key2: metadata_value2 . FrontMatter允许用户自定义额外选项，但必须遵守YAML格式规则。 . 可以访问 fastpages 主页 了解更多内容 . 这里是脚注信息 &#8617; . |",
            "url": "https://invisprints.github.io/blog/markdown/fastpages/2020/04/04/markdown-tutorial.html",
            "relUrl": "/markdown/fastpages/2020/04/04/markdown-tutorial.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://invisprints.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://invisprints.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "《自控力是训练出来的》",
            "content": "《自控力是训练出来的》 . 这是一本可以超快速阅读的书，是一本可以当做查阅手册和行动指南的书。 . . 题外话 . 无聊时看了看室友书架上的书，这种精心包装又符合当代社会的书自然吸引了我的目光，简单看下来，这本书有惊喜之处也有让人失望的地方。 这本书并不是那本很出名的《自控力》，我刚开始也被骗了，等我发现时书已经读了一大半，想想还是读完吧。 . 概述 . 本书以“自控力”为中心，配上关键字“训练”，构成整本书。通过一系列吸引人眼球的“风靡哈佛、耶鲁、斯坦福”，“决定人生命运的关键力量”和“职场精英成功掌控xxxx”的标题，告诉读者此书非同小可。理论洗脑 + 名言警句 + 训练手册 + 成功案例，全书架构清晰，思路流畅，层层递进，可以说是一本不错的畅销书。 . 结构 . 其实在概述部分已经点出本书的结构了，这本书的结构可以从两个方向来看，第一个方向从目录直接就可以看出，理论洗脑 + 名言警句 + 训练手册 + 成功案例，很简单的平铺结构。另一种要看完了才知道，是 why how what 结构。书从“为什么要训练自控力？”-&gt;“自控力怎样训练？”-&gt;“训练内容是什么？”层层递进，铺展开来构成全书。 . 内容 . 浅显易懂是这本书的最大优点，畅销书要做到畅销首先必须是语言简单，其实看完这本书后我意外发现这是本很不错的营销优秀范本。语言简单是这本书首要特点，以“风靡”、“哈佛、耶鲁、斯坦福”、“决定人生命运”、“精英”这些吸引人的词语放在标题，充分吸引读者。抓住当代人所缺乏的自控力，可以说找到一个很好的切入口。配以训练标题，在目前知识付费这个风口上可以说是恰如其分。简单翻翻书，书中说有重点都自动标注出来，稍稍看下，语言简单，训练轻松，给人一种10周就可以登上人生巅峰的感觉。不可否认，这是本典型的营销书籍。 书的内容还是可圈可点的，每一句话都说的很有道理，考虑了现代人渴望速成和零碎时间的现状，很有针对性得提出计划。首先语言简单，这样阅读速度就可以很快，迅速把前面理论篇章看过去，顺便给读者打了一剂鸡血，而在在理论篇章配以大量警句，都是可以马上行动的语言，给渴望速成的人提供建议。而后面的训练计划一个是10周，另一个是每个训练花费不了多少时间，这样就很符合当代人的生活节奏，能在短时间内有效果，而且并不影响当前的生活节奏，可以说是十分完美的训练手册。 虽然说很多人在经历了知识付费的浪潮后很反感这种“速成”的课程，因而对我上面推荐理由不以为然，但是他们并没有认识到当前这个社会的一些现状和个人成长的局限性。首先快节奏和时间碎片化是这个时代不能改变的东西，你如果想花大把大把的时间用在培训上，那只能脱离当前社会，隐居山林，这对大部分人来说是明显不可取的。其次是人在训练过程中是需要变化来鼓励自己的，一个很长时间看不到成果的训练或计划是难以维持下去的，因此才会有速成课程的兴起。所以我们既要认清当前的现状，同时又清楚速成只是一时，我们还需要长期训练加以配合，才能真正起到我们想达到的效果。 . 缺点 . 讲述方式是这本训练手册最大的败笔。书中大堆罗列名言警句，明显就不是想让我们一条条看下去的，只能当做本字典来查询，后面的训练部分也有这个问题。在“自控力与心智训练”的章节中，竟然大堆罗列枯燥无味的方法，太让我感到意外，值得欣慰的是第三章以后恢复了正常，具有一个训练手册该有的样子，不过语言过于平淡，难以让人激发想训练的冲动。 如果是我来写这本书的话，我肯定模仿市面上流行的记忆力训练手册来写，这样的话我相信训练意义更大。 . 其他 . 既然书看错了，那我以后肯定会补《自控力》这本书的，不过目前手上只有电子版，等开学的时候再看看吧。 .",
            "url": "https://invisprints.github.io/blog/reading/2017/08/25/%E8%87%AA%E6%8E%A7%E5%8A%9B%E6%98%AF%E8%AE%AD%E7%BB%83%E5%87%BA%E6%9D%A5%E7%9A%84.html",
            "relUrl": "/reading/2017/08/25/%E8%87%AA%E6%8E%A7%E5%8A%9B%E6%98%AF%E8%AE%AD%E7%BB%83%E5%87%BA%E6%9D%A5%E7%9A%84.html",
            "date": " • Aug 25, 2017"
        }
        
    
  
    
        ,"post9": {
            "title": "《金字塔思维 - 现代人精神健康之道》",
            "content": "《金字塔思维 - 现代人精神健康之道》 . 这是近年来我读过的最好的书，这是一本可遇不可求的书。 . . ##题外话 说来也巧，这本2000年的旧书是我在图书馆闲逛时无意发现的，当时只是打算消磨消磨时间，没想到看了一小段后根本刹不住车！比起之前看了又放弃的一大堆哲学入门书和什么现代生存法则，这本书不知道比它们高到哪里去了。 . 概述 . 正如书中前言所言，《金字塔思维》这本书“想提供给读者的是一种健康的思维方法”，告诉人们在现代社会应该如何看待各种社会现象和社会纷争，怎样在这个高速发展的社会寻找自身的价值和意义。书中以超级生动形象的言语启发人们如何把握生活节奏，如何形成积极向上的人生观价值观，可以当做大多数人的哲学启蒙书。相比于另一本哲学启蒙书——《中国哲学简史》，我认为本书更加通俗易懂，而且对现实的指导意义更大。 . 结构 . 我认为每个领域的入门书都应该是自顶向下设计的。先宏观再微观，有大方向到具体细节，这样看下来我才知道自己学了什么东西，可以用在什么方向。而不是像现在的主流教科书一样，自以为以小见大，从一个突破口突破。结果是学生学了半天不知道可以应用到哪个方向上，只会做特定情况的练习题。高中以上的教科书基本都有这个毛病，最严重的就是外国翻译过来的所谓经典教科书，没有一个适合入门，《计算机网络》除外。 . 正因为市场上的书籍很多都有这个毛病，所以目前产生了新的读书法，具体可看我的学习方法下的文章，总的说来就是找到这本书自顶向下的结构，然后按照这个顺序看。 . 最让我惊喜的是这本书的结构，真的是自顶向下，由有宏观到微观，从战略到战术的排版结构，想不到这本在2000年出版的书能有如此觉悟，直接吊打现在的很多畅销书。 . 《金字塔思维 - 现代人精神健康指导》的序讲作者的意图和书与众不同的地方；前言说明这本书想告诉读者的内容；书内容第一部分总论健康思维，从精神世界的重要性到寻找精神框架，从超越对抗到顺应天人再到探索命运，层层递进，环环相扣，逻辑严密，思维敏捷。读此书时，好像看一局棋，先把握盘面局势，了解整体布局，再看整体流程，了解发展趋势，然后层层拆解，知晓孰轻孰重，最后细看局部，探索其中玄机。正如此书所言： . 当一个人有了这种智慧，便能清晰地把握人生的道路，既不会盲目羡慕那些不属于自己可走的路，也不会对自己慎重选择的道路产生后悔。由此，你便能构筑稳固的精神框架，经得起各种人生的困境和考验。这就是现代精神健康的灵魂。 . 内容 . 内容的话我只能用形象生动，通俗易懂来形容，用书中序的话来说就是“以他深厚的理论功力，进入那极其纷乱繁杂千变万化的真实世界，以轻松自然的自然语言，引人入胜的中外历史典故，生动活泼的生活例子，道出他在抽象深奥的哲学理论领域多年探索的结晶。” . 关于书中的具体内容这里不再赘述，感兴趣的可以前往图书馆借阅，网上只有二手书卖。书中的一些感悟我可能会在后面的博文中写出来，不过不要抱太大希望，因为那意味着我得有时间看第二遍。 . 缺点 . 一本书不可能只有优点没有缺点，上面说了这本书这么多好的地方，下面谈谈我认为的不足之处。 . 首先将思维的肯定要受到历史和时代的影响，有其局限性，但是令我惊讶的是里面有些思想已经突破那个时代，对近年来一些社会问题和现象具有很强的指导意义，这是让我十分惊喜的，但是书中有部分内容对当今这个社会已经不太适用，需要读者警惕，不要一味按照书中的来，毕竟当时的作者肯定没有料到当今的移动互联网时代，更没有料到互联网对人生的重要影响。 . 然后就是这本书更像一味药而不是保健手册，多放下而少争取，多治疗而少预防，如果我们的思维本身就是比较健康的，那么看这本书就需要警惕，“是药三分毒。” . 还有个缺点就是这本书有不少错别字。 . 其他 . 这段时间还在看《自控力是训练出来的》，对比起来差距明显。《自控力》这本书看了后收获还是有，不过明显看出作者对书的设计规划思考不够。书中疯狂列出忠告啊建议啊，根本不考虑读者怎么吸收这些东西，如果是我设计《自控力是训练出来的》，我肯定写成一本训练指南。 .",
            "url": "https://invisprints.github.io/blog/reading/2017/08/19/%E9%87%91%E5%AD%97%E5%A1%94%E6%80%9D%E7%BB%B4-%E7%8E%B0%E4%BB%A3%E4%BA%BA%E7%B2%BE%E7%A5%9E%E5%81%A5%E5%BA%B7%E4%B9%8B%E9%81%93.html",
            "relUrl": "/reading/2017/08/19/%E9%87%91%E5%AD%97%E5%A1%94%E6%80%9D%E7%BB%B4-%E7%8E%B0%E4%BB%A3%E4%BA%BA%E7%B2%BE%E7%A5%9E%E5%81%A5%E5%BA%B7%E4%B9%8B%E9%81%93.html",
            "date": " • Aug 19, 2017"
        }
        
    
  
    
        ,"post10": {
            "title": "BetterTouchTool",
            "content": "BetterTouchTool . BTT 作为 macOS 平台最为强大的触控板扩展插件，因其不友好的配置界面将很多用户拒之门外。本文为 BTT 入门之文，高级用法还需用户自己挖掘。 . 入门文章 . 看看这些就够了，再造轮子没啥意义。 Mac 触摸板增强神器：BetterTouchTool 上手指南 OS X系统 手势终极设置方法+BetterTouchTool详细设置中文翻译 . ##手势 这个是最重要的，必须在这做个备份。 . ###单手指 corner click bottom left 左下角单击 corner click bottom right 右下角单击 single finger tap top left 单指轻拍左上角 single finger tap top middle 单指轻拍上边中点 single finger tap top right 单指轻拍右上角 single finger bottom tap left 单指轻拍左下角 single finger bottom tap middle 单指轻拍下边中点 single finger bottom tap right 单指轻拍右下角 single finger tap left side middle 单指轻拍左边中点 single finger tap right side middle 单指轻拍右边中点 . ###双手指 tipap left 中指拍住中央食指轻拍面板 tipap right 食指拍住中央中指轻拍面板 pinchi in 两个手指捏 pinch out 两个手指放开 rotate left 张开两指以两指中心为圆轴逆时针 rotate righ 张开两指以两指中心为圆轴顺时针 scroll up (modifier key needed) 双指按滚动方向滑动(需设定下面的功能键) scroll down (modifier key needed) 双指按滚动方向相反滑动(需设定下面的功能键) tow finger swipe up 双指上划 tow finger swipe down 双指下滑 tow finger swipe left 双指左滑 tow finger swipe right 双指右滑 tow finger swipe from top edge 双指从上边缘下滑 tow finger swipe from bottom edge 双指从下边缘上滑 tow finger swipe from left edge 双指从左边缘右滑 tow finger swipe from right edge 双指从右边缘左滑 . ###三手指 three finger tap 三指轻拍 three finger double tap 三指双轻拍 three finger tap top 三指拍顶端 three finger tap bottom 三指拍底部 three finger click 三指点击 three finger swipe up 三指上划 three finger swipe down 三指下划 three finger swipe left 三指左划 three finger swipe right 三指右划 three finger clickswipe up 三指点击并向上滑 three finger clickswipe down 三指点击并向下滑 three finger clickswipe left 三指点击并向左滑 three finger clickswipe right 三指点击并向右滑 tow finger tip tap left 两指轻拍住，拍左 tow finger tip tap middle 两指轻拍住，第三拍中 tow finger tip tap right 两指轻拍住，第三拍右 tipswipe left finger up 右二指固定拍住，左一上滑 tipswipe left finger down 右二指固定拍住，左一下滑 tipswipe left finger left 右二指固定拍住，左一左滑 tipswipe left finger righ 右二指固定拍住，左一右滑 . ###四手指 four finger tap 四指轻拍 four finger double tap 四指双轻拍 four finger click 四指单击 four finger swipe up 四指上滑 four finger swipe down 四指下滑 four finger swipe left 四指左滑 four finger swipe right 四指右滑 three finger tiptop left 中指无名小拍住，食单击 three finger tiptop right 食中指无名拍住，小单击 . ###五手指 five finger tap 五手指轻拍 five finger click 五手指点击 five finger swipe up 五手指上滑 five finger swipe down 五手指下滑 five finger swipe left 五手指左滑 . ##注意 我在使用这个软件的时候，发现每次电脑休眠后 BTT 都会失效，必须重启才能继续使用，望读者注意。 .",
            "url": "https://invisprints.github.io/blog/software/2017/08/11/BetterTouchTool.html",
            "relUrl": "/software/2017/08/11/BetterTouchTool.html",
            "date": " • Aug 11, 2017"
        }
        
    
  
    
        ,"post11": {
            "title": "《番茄工作法图解》",
            "content": "《番茄工作法图解》读书感悟 . 花了一个小时看完，写一下自己的感受。 番茄工作法简单易上手，很容易改善目前的生活。但是如果还想往上达到一个新高度，就需要深入了解番茄工作法。 . ##第一阶段 关键词： 25min，5min，专心 . 无需多阐释，这时番茄工作法易上手的根本原因，实施起来极简单。 . ##第二阶段 关键词：最重要，一次一个，每天计划，预估，马上停止，回顾番茄，防止打断，计划外紧急，新番茄计划。 . 这部分需要做一下说明：每次番茄都要完成当前最紧急的事情，这样让让你全心全意投入进去，而不会分心想我还有**没有完成。 一个番茄完成只完成一件事情，因为切换工作会造成大脑中断，大脑切换到另一个工作是需要时间的，在短短的25min内切换工作是无法达到高效学习的目的。还有这样的好处是留有时间过度学习，过度学习将在第三阶段阐述。 每天早上计划今天的任务，不要太多，完不成计划没有意义，一天能达到8个番茄就已经很好了，每天制定一定数量的番茄并坚持每天完成。长期下来会越来越有成就感，拥有好的状态。 既然有计划就有预估，判断每个任务的番茄数是关键。因为一天很少超过8个番茄，因此一个任务最好不要超过7个番茄，学会细分任务。合理的预估是保证能按时完成番茄的关键。 正如在番茄时间不能中断，到了休息时间应该马上停止。如果担心思路中断，可以先做个标记。马上停止手上工作开始休息的理由是保证下个番茄的高效进行，人长时间高精力的工作是会折寿的。 每天晚上需要回顾今天的番茄，对计划和预估做适当评价，看看有没有什么不合适的，有没有什么新发现，有没有哪里做的很好的。保证未来的番茄能够高效进行。 正如一个番茄只做一件事一样，为了保证番茄钟内高效工作，我们要尽量防止自己的番茄钟被内部或外部因素打断。让大脑处于高速运行状态。 如果遇到十分重要的事情，可以先把这件事记下来，接着进行当前的番茄钟。等番茄钟结束后再规划新的番茄来完成这个重要的事情。切忌在休息时间内完成重要事情。 如果遇到必须要打断的事情，那么当前的番茄钟作废。 . ##第三阶段 关键词：条件反射，回顾收获，连续工作，过度学习，合理休息。 . 正如我们闻到香味会流口水一样，让自己关于番茄钟形成一定的条件反射有助于自己高效工作。如在番茄开始时播放时钟滴答声，或者重复一些相同动作。长期以往后，每次在进行这些动作时，大脑就会高速运转并集中精力。 每天总结时告诉自己今天收获了什么，按照记忆曲线规律，帮助自己收获今天有价值的东西，能快速帮助自己提高。 不要让休息时间太长，避免每次开始番茄时都像从头开始一样，最好多个番茄排在一起，这样能保证工作持续高效进行。 番茄钟还没结束但任务已经完成了，这时候切换到其他任务没有意义。不如对刚刚完成的任务进行总结反思，有时候会有意想不到的收获。 为了保证番茄钟内能高效工作，休息时间一定要休息。离开位置走一走，趴在桌上休息会儿，让脑袋尽量放空，少思考。 .",
            "url": "https://invisprints.github.io/blog/reading/2017/05/24/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3-%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F.html",
            "relUrl": "/reading/2017/05/24/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3-%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F.html",
            "date": " • May 24, 2017"
        }
        
    
  
    
        ,"post12": {
            "title": "《高效阅读》",
            "content": "《高效阅读》 . ##消除回读 阅读环境： 光线适中、漫射灯光 . 阅读姿势： 背靠椅背，低头垂肩，书与眼睛45度 . 消除回读： 用手做引导物（反复练习） 一次比一次更快（消除默读） . ##提高理解力 找出每段主题句 大量练习：阅读-&gt;回忆-&gt;复读-&gt;回忆 . ##阅读理念 阅读可以有不同方法 阅读不需要从头到尾 阅读可以反复读 阅读要有阅读目的 . ##回忆能力 神奇之线（斜线+关键词） . ##扩展阅读速度 线性阅读：2/3倍练习 手指移动：只移动手腕以上部分 . ##了解写作技巧 非小说文学：先两头后中间 . ##刷页技巧 手掌朝下来回摆动 . 不按顺序阅读 消除默读 信号词 其他阅读方法 提前组织 改变练习态度 阅读小说技巧 手动法 游戏一样阅读 目的性阅读 阅读计划 图形记忆法 已知技巧 复杂文章 特殊训练 报纸 信件 杂志与新闻 .",
            "url": "https://invisprints.github.io/blog/reading/2017/05/22/%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB.html",
            "relUrl": "/reading/2017/05/22/%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB.html",
            "date": " • May 22, 2017"
        }
        
    
  
    
        ,"post13": {
            "title": "Automator",
            "content": "Automator 使用案列 . 尽管前端时间爆出Apple撤销了自动化部门，但是automator对于大量重复性生产工作的任务依然有着windows无法达到的优势 ##将多份ppt一键转化成pdf 本人是学生，对于许多ppt课件，转换成pdf稍后学习是本人的刚需 在Automator中新建文稿，选择服务，然后如下配置 . 其中AppleScript代码部分如下： . on run {input, parameters} set theOutput to {} tell application &quot;Microsoft PowerPoint&quot; -- work on version 15.15 or newer launch set theDial to start up dialog set start up dialog to false repeat with i in input open i set pdfPath to my makeNewPath(i) save active presentation in pdfPath as save as PDF -- save in same folder close active presentation saving no set end of theOutput to pdfPath as alias end repeat set start up dialog to theDial end tell return theOutput end run on makeNewPath(f) set t to f as string if t ends with &quot;.pptx&quot; then return (text 1 thru -5 of t) &amp; &quot;pdf&quot; else if t ends with &quot;.ppt&quot; then return (text 1 thru -4 of t) &amp; &quot;pdf&quot; else return t &amp; &quot;.pdf&quot; end if end if end makeNewPath . 保存好以后就可以直接使用了，在选中需要转换的ppt之后，右键-服务-你保存的服务的名字 .",
            "url": "https://invisprints.github.io/blog/software/2017/02/16/Automator-%E4%BD%BF%E7%94%A8%E6%A1%88%E5%88%97.html",
            "relUrl": "/software/2017/02/16/Automator-%E4%BD%BF%E7%94%A8%E6%A1%88%E5%88%97.html",
            "date": " • Feb 16, 2017"
        }
        
    
  
    
        ,"post14": {
            "title": "Final Cut Pro X",
            "content": "Final Cut Pro X 学习笔记 . 参照Final Cut Pro X 10.1 非线性编辑高级教程 . 本学习笔记仅针对于那些阅读过Final Cut Pro高级教程的人，方便他们遗忘时快速查阅 . [toc] . ##导入媒体 ###备份原媒体 对于Final Cut Pro可识别的设备，可以在导入界面单击左下角的创建归档来创建备份 ###个人收藏 如果需要经常打开某一文件导入视频，可以在导入界面右键选择该文件夹，单击“个人收藏” ###媒体导入选项 创建优化的媒体：将生成一个新的Apple ProRes 422文件，该文件适合合成、特效的工作，减少处理运算时间 创建代理文件：生成新的Apple ProRes 422(Proxy) 文件，该文件体积较小 ###一个片段中标记多个选择范围 运用cmd-shift-i 和cmd-shift-o快捷键 ###从其他软件中拖动 在Final Cut Pro的偏好设置中单击导入图标，可以设置从其他软件拖动时的一些默认选项。 导入时操作光标的信息： 加号➕：将文件拷贝进 拐弯的箭头：让文件包保留在原位 . ##整理片段 在选择片段中某一部分时，可以用左右键逐帧调整。 ###关键词使用 应用关键词可以减少搜索想要片段的时间，关键词不能太独特，定位介于名字和事件之间。 关键词可以分配到整个片段或部分片段上，在被关键词标记的片段上方会出现蓝线。 ####添加关键词 选中目标片段后，在工具栏上单击“关键词编辑器”按钮🔑 打开关键词编辑器HUD，输入相应关键词，【Enter】键完成该关键词 . 若想创建空的关键词精选，右键事件，点击“新建关键词精选” 创建好后可以将相应片段拖动到该关键词精选中 . 可以事先将关键词输入到关键词编辑器HUD中，这样可以利用快捷键快速添加关键词 ###修改名称 选中某些片段后，选择“修改&gt;应用自定名称” ###添加注释 注释只能对整个片段添加，在列表视图或检查器中添加 ###评价片段 未评价：新导入的片段都默认未评价 个人收藏：被添加进个人收藏的 片段或部分片段 画面上会显示绿线，个人收藏标签可被重命名和添加注释 拒绝片段：拒绝片段默认被隐藏起来 ###搜索过滤排序 浏览器的搜索栏可以对元数据进行搜索，过滤器图标可以添加更多搜索条件。 . 创建智能精选： 相当于把过滤器的搜索条件保留下来 ###侦测任务和拍摄场景 右键被选择的片段，在快捷菜单中选择“分析并修正”命令 勾选“查找人物”和“在分析后创建智能精选” 下面是分析后可能得到的结果： . 幅面 人物 . 特写镜头 | 单人 | . 中等镜头 | 两人 | . 宽镜头 | 三人 | . ###角色 分配角色有助于剪辑操作，在剪辑时决定哪些角色起作用，哪些不起作用 ####分配角色 选择“修改&gt;编辑角色”，打开角色编辑器 单击加号添加角色，接下来有几种方法把角色分配给一些片段，选定片段后 . 单击“修改&gt;分配**角色” | 打开信息检查器，选择相应角色 | 可以给多组片段同时设定角色 . 在“角色”索引中，取消一些角色，该角色所指向的片段将被禁用，这样可以减少修剪某些片段时其他片度的干扰 . ##前期剪辑 ###项目 对应于Premiere的序列，所有视频剪辑工作都是在项目上的时间线上剪辑 概念点： 主要故事情节 创建项目 磁性连接 追加片段 片段外观 扫视 将多个片段同时追加到主要故事情节上 . 令播放头位于时间线最开始地方：按住【Fn】，再按下左箭头⬅️键 . ###波纹修建 . 切换到选择工具 | 在时间线上将光标放在该片段末尾，直到波纹修建工具图标上出现胶卷，如果向左延伸，则会修剪左侧片段 | 按住鼠标并拖动，直到修建到理想位置 | 键盘精准修剪 | . 选中该片段的起始点或结束点，按,向左修剪一帧，按.向右修剪一帧 . 更改片段时间长度 . | 选择某一片段，右键单击更改时间长度，或快捷键ctrl-D在Dashboard中输入数字，若想5秒，输入“5.(Enter)”，此为裁剪掉超时部分 | 选择某一片段，进入自定速度界面，更改速度 | . ###调整主要故事情节的时间 波纹删除：直接按【Del】删除片段，后续片段向左滑动填充空隙 空隙片段代替：按【Shift-Del】组合键，在该片段位置留下相同时间长度的空隙片段，后续片段不动 . 插入空隙片段：将播放头放在想插入空隙的位置，选择“编辑&gt;插入发生器&gt;空隙”命令，空隙默认3秒，可调整空隙时间长度 . 切割片段：熟记快捷键 接合片段：选择接合编辑点，按【Del】键删除接合编辑点。仅对该结合点左右部分原来就连接在一起的片段有用 . ###在主要故事情节上方进行编辑 添加切入切除片段，快捷键Q，添加的片段都是连接片段，随主要故事情节移动 按住cmd-option再单击连接片段的底部可以重新确定连接点 . 覆盖连接： 按住【`】键拖动主要故事情节，此时光标的形状变成一个斜杠横过连接片段，表示Final Cut Pro忽略任何连接片段，连接片段不随主要故事情节移动 . ###连接的故事情节 连接的故事情节是一种容器，容纳一些片段。若希望在连接的故事情节中插入一个新片段，必须选择这个横栏再进行剪辑，而不能选择该故事情节中的某一个片段 . 创建故事情节：选择某些片段后，右键-创建故事情节或使用快捷键 . 在同一个故事情节的片段之间有主要故事情节的一些特性，如磁性时间线。可以进行波纹修剪和卷动修剪（不影响故事情节的时间长度） . ###在主要故事情节下方进行编辑 添加背景音乐，快捷键【Q】 . ###调整剪辑 音量控制线 渐变手柄：在音量控制线的开头结尾 独奏：Option-S . 添加标记：M 标记可以与标记对齐，适用于音频节奏和视频画面对齐 . 调整片段音量： 单击Dashboard的音频指示器按钮，出现大号音频指示器 选择多个片段，按ctrl--和ctrl-=同时添加或减少片段音量 . 转场和渐变手柄的使用 . ##剪辑修改 多版本项目： . 快照：与原项目再无任何关系，可当作备份 | 复制项目：某些特殊片段类型会保持动态更新，如复合片段 | . ###将片段从故事情节中举出|替换片段 保证所有连接片段和故事情节同步 . 选择需要的片段 | 右键，选择“从故事情节中拷贝” | “替换” | . | ###创建Time at 0:00 ####例1 将播放头向左移动3秒 将播放头移动到指定位置后，按ctrl-P，Dashboard上的数值会被清除，等待输入新的数字 既可以输入时间码数值，也可以输入位移量数值，这次用位移量数值 在键盘上按-（=的话是向右移动），接着输入3.，此时Dashboard显示出播放头将要向左移动3秒的长度 按回车键确定 . ####例2 倒放 选中指定片段，在视频检视器左下角点击重新定时按钮 点击倒转片段按钮，此时片段上方会出现横栏，标志相应信息 在重新定时下拉菜单中选择“隐藏重新定时按钮”可隐藏横栏 . ###标记 一共有四种形式的标记： . 标准 | 待办事项 | 已完成 | 章节 | . 在浏览器窗格中，可以通过搜索栏找到标记；在时间线中，可以通过时间线索引窗格找到片段中的标记 . 时间线索引：时间线索引有3种索引：片段，标记和角色。都支持搜索和多个选择范围 | 创建标记：按一下M创建标记。连按两下创建标记并打开 | . ###位置工具 类似于Premiere上的覆盖操作 . 位置工具快捷键：P 覆盖编辑：D . ###试演 将多个镜头打包起来，以同一个片段的形式放置在项目中，方便切换比较 . 选中多个相似片段，右键选择“创建试演”，此时浏览器会出现一个新的试演片段 单击试演片段上的聚光灯图标，打开试演窗口 左右键可切换不同片段，单击“完成”确定 试演片段可以像普通片段一样加入到时间线中 . 避免试演引发的波纹：将试演片段举出，令其成为一个连接片段，并在故事情节中留下空隙片段 . ###修剪开头结尾 修剪结尾：option-] 修剪开头：option-[ 修剪到所选部分：option- . 复制片段：按住【option】并拖动片段 . ##精剪 ###片段重新定时 cmd-R 调出重新定时编辑器 在定时器的最右侧，拖动把手，手动调整片段播放速度 在速度下拉菜单选“自定”命令，手动输入播放速度，波纹选项指的是后续片段跟不跟随移动 . ####切割速度 一个片段中至少有两种不同的播放速度 . 将播放头移到需要速度变化的地方，从“重新定时”菜单中选择“切割速度”，快捷键shift-B，将速度调整到理想位置 在速度变化之间，会有速度转场，用于控制不同段落之间速度的变化，可以调整 在速度转场HUB中可以选择是否启用速度转场，源帧编辑器用于卷动编辑两个速度段落之间的内容 . ###视频效果 双击应用视频效果，扫视查看每个效果 ####景深效果 将需要创建景深效果的画面复制并粘贴，使粘贴的片段完全粘贴在原有片段的上方 停用下层视频画面，对上层视频应用遮罩效果，改变控制点的位置，露出想要景深的画面部分 对上层视频应用高斯效果，恢复下层视频，调整上层视频遮罩范围和高斯模糊程度，使其过渡自然 . ###转场 ####添加转场 . 选择某个编辑点，应用转场，转场会应用到该编辑点上 | 选择一个片段，应用转场，转场会应用到该片段的开始点和结束点上 | 选择某些片段，按cmd-T快捷键，这些片段都会添加默认的转场（一般是交叉叠化） | 媒体余量： 片段的编辑点是黄色的方括号形状，则至少有2帧的媒体余量可用于转场，如果是红色的，则没有媒体余量 在没有媒体余量时添加转场，软件会自动剪裁相应媒体，这样会影响后面其他片度的位置，整体时间长度变短。 . ####编辑自定转场 检查器 画面 时间线 选中转场后，按ctrl-D在Dashboard上调整转场时间长度 . ###画面合成 变换画面： 按住option键并单击想要变换的画面片段，在监视器中选择变换工具 . 修建与裁剪： 修建去除图像中某些部分，裁剪除了去除图像中某些部分，还会将剩余部分放大以填充当前画面的线框 . 视频动画编辑器：选中片段，右键显示视频编辑器，不透明度在复合选项中 . 复制粘贴属性：复制片段后，选择“编辑&gt;粘贴属性”，或者Cmd-Shift-V ##复合片段 可以将许多片段复合成一个复合片段，当其中一个复合片段更新时，其他项目中使用该复合片段的部分也会动态更新 创建复合片段右键或快捷键option-G 双击该复合片段即可编辑该复合片段 . ##完成剪辑 ###字幕 ####添加字幕 将播放头放到需要显示字幕的第一帧，在字幕浏览器中双击选好的字幕样式添加字幕 ####编辑字幕 双击时间线上的字幕，在检查器中编辑字幕，可对字幕中部分文字单独设置字体颜色等属性 ####字幕长度 够编辑师看两遍但不够看第三遍 ####延长编辑 . 选择片段结束点 | 将扫视播放头放在需要修剪到的位置上 | 按shift-X，片段结束点将自动与扫视播放头对齐 | ###音频 单独修建音频： 双击需要分离音频片段的音频波形部分，音视频就会分离。或者右键片段，单击展开音频 . 创建关键帧： 按住option键单击控制线，快捷键option-K . 音量动态范围： 电影院级别音响36dB，移动设备12dB动态范围 . 改变通道配置： 选择含有优先级的声音通道的片段 . 选择时间线上的片段： 在索引中搜索片段名称，或片段标记角色等，可以同时选择一个或多个片段 在音频检查器中找到“音频配置”选项，将立体声改成双单声道 取消第二个单声道，令其静音，使第一个通道成为唯一的采访谈话音源 . 关键帧范围选择： 使用范围选择工具（r键），在片段上选择某一区间，拖动控制线，这时系统会自动设定4个关键帧 . 片段浏览： 显示-片段浏览命令激活 激活后可以单独查看片段，没有上下片段和音频的混合干扰 . ###平衡颜色 ####自动白平衡 . 选择某一片段，单击视频画面检查器的魔术棒图标，会显示平衡颜色 | 单击平衡颜色，Final Cut Pro 会优化那帧画面，但整个片段并没有被分析 | ####手动调节片段曝光 只有片段被剪辑到项目中后，才能控制颜色调整参数 . 选择需要修改的在时间线上的片段，单击视频检查器中的魔术棒，选中显示颜色版 | 在“显示”选项卡中，单击”在检视器中显示“-视频观测仪 | 为方便调整，建议关闭浏览器 | 首先调整对比度，在视频观测仪中选择“显示”下面的一个小图标，选择“波形”和“RGB列示图“。 | 对比度第一步先调整像素亮度，在右边的“颜色板”中选择“曝光”标签，有四个可以调节的选项，从左到右分别是全局-阴影-中间调-高光，调整是注意要让所有亮度在0～100范围内 | 亮度调好后切换到“颜色”标签。 | ####手动调节片段色彩 1.在颜色版中选中颜色标签 . 四个圆球代表全局-阴影-中间调-高光，都位于一个方格上，方格上半部带有“+”号，为增加该颜色数值，方格下半部带有“-”号，为减少该颜色数值。在调整之前现在视频观测仪中调整到矢量显示器。 | 如果图像完全没有偏色问题，观测仪中所有代表像素的点会集中在中央。 | 观测仪中图像偏向哪种颜色，就在颜色版中将四个圆球拖向该颜色区域的下半部分 | 若调整过度，可单击还原按钮重新调整 | ####匹配颜色 为了在不同画面维持一致画面感觉，需要匹配颜色 . 选择需要调整的片段，按住option键单击该片段，在选中该片段的同时播放头也对准该片段 | 在检视器中选择魔术棒图标，单击”匹配颜色“，检视器此时会分成左右两个画面，左为原片段，右为需要调整的片段。 | 扫视到需要匹配的画面后，单击一下，右侧片段会更新匹配，效果满意后，单击“应用匹配项”。 | ##共享文件 ###捆绑包 将影片同时发布到多个位置。 打开Final Cut Pro偏好设置，选择“目的位置“-“添加目的位置”，将捆绑包拖入左侧边栏中，将需要的预置项目拖到捆绑包中，并给捆绑包重新命名 . ##导入文件 ###引用外部媒体 引用外部媒体的意思是让源文件保留在原位，Final Cut Pro会创建一系列替身文件指向源文件 . 创建好资源库和事件后，打开导入媒体窗口，选择指定片段后在右边选择“让文件保留在原位”，单击导入按钮 . 若遇到丢失文件状态，只需选择离线片段，“文件”-“重新链接文件”即可 | . ###文件拷贝进资源库 将原媒体文件直接内置于Final Cut Pro . 创建好资源库和事件后，打开导入媒体窗口，选择指定片段后在右边选择“拷贝到资源库”，单击导入按钮 . ###资源库内部拖动文件 将事件1中的视频移到事件2中只需鼠标拖动过去 将事件1中的视频复制到事件2中时，拖动的同时按住option键 . ###制作便携资源库 . 新建一个空的资源库，如“On the Go” | 选中要转移的事件，选择”将事件拷贝到资源库”-“On the Go” | 取消选择“优化的媒体”和“代理媒体”，选择“好“ | 选择该资源库”On the Go“，菜单栏中选择“文件”-“整合资源库文件” | 单击“好” | 关闭资源库 | ##双系统录制同步 有时会在不同设备上录制视频和音频，这时候需要将它们同步组合成一个新片段 . 选择视频和相对应的音频，右键选择“同步片段”命令，这时候会生成一个新的片段，在该资源库中。但此时该片段同时播放了视频中的音频和单独录制的音频，需要调整。 右键该同步片段，选择“在时间线中打开”，目前有两个方法关闭视频中的音频 . 将视频片段中的音量控制线向下拖到无限小 | 在音频检查器中取消“故事情节”选项 | . ##颜色抠像 选中需要抠像的片段，在效果浏览器中选择“抠像”-“抠像器”，双击应用效果。 对于被去掉的背景，还需要在该片段下方添加相应其他背景填充 利用遮罩工具，去掉其他的一些元素 . 若想手动选择样本颜色，则在视频检查器中将抠像器参数中的“强度”滑块拖到0% 找到“精炼抠像”中的样本颜色按钮，将光标移动到监视器上，在背景上拖出一个矩形框，去除背景 反复执行上一步骤，直到所有背景都消失 . ##快捷键 停用某段视频画面：V 添加默认转场过渡快捷键：cmd-T 选择工具：A 切割工具：B 滑动工具：T 位置工具：P 切割片段：Cmd-B 范围选择工具：R 吸附磁力：N 按照时间线上的长度选择开始点和结束点：X 向开始点和结束点填入视频内容（从结束点开始向前填充）：shift-Q 显示视频动画编辑器：ctrl-V 撤回编辑：shift-X 波纹修剪：T 连接编辑：Q 追加编辑：E 插入编辑：W 覆盖编辑：D 插入空隙：option-W 更改片段外观：ctrl-option-1, ctrl-option-down, ctrl-option-up 创建故事情节：cmd-G 独奏：Option-S 标记：M 扫视：S 隐藏重新定时编辑器：cmd-R 切割速度：shift-B 预览片段：/ 修剪结尾：option-] 修剪开头：option-[ 修剪到所选部分：option- 粘贴属性：cmd-shift-V 新建复合片段：option-G 关键帧：option-K 显示视频观测仪：cmd-7 显示颜色版：cmd-6 取消对任何项目的选择：cmd-shift-A 导入媒体：cmd-I 音频指示器：cmd-shift-8 将文件拷贝进：option 让文件包保留在原位：cmd-option 关键词编辑器：cmd-K 个人收藏：F 拒绝片段：Del 取消评价：U 打开检查器：cmd-4 放大时间线：cmd-= .",
            "url": "https://invisprints.github.io/blog/software/2017/02/14/Final-Cut-Pro-X-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
            "relUrl": "/software/2017/02/14/Final-Cut-Pro-X-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
            "date": " • Feb 14, 2017"
        }
        
    
  
    
        ,"post15": {
            "title": "KMP 算法",
            "content": "KMP 算法 . 参考资料 . 本文参考算法导论，清华大学出版社的数据结构C语言版，伯乐在线的我理解的KMP算法，matrix67大神的博客，再根据自己理解写下这篇文章 . 正文 . KMP算法是解决字符串匹配问题，详细来说，是当前有A，B两个字符串，KMP算法就是来判断B串是否是A串子串的高效算法。比如你可以委婉地问你的MM：“假如你要向你喜欢的人表白的话，我的名字是你的告白语中的子串吗？” 相对于朴素的时间复杂度为O(mn)的比较算法（虽然在大多是情况下只有O(m+n) 但在这里我们只考虑最坏情况）KMP算法稳定在O(m+n) ，因此有较广泛的应用。 KMP算法是我遇到的第一个看了算法导论和网上一些资料后还有些懵懂的算法，后来发现其实主要原因是我们上数据结构这门课时老师讲的不是很清楚，所以有些关键的东西一直没有弄清。 . 出于对Matrix67大神的崇拜，直接引用他的例子说事。当前有两个字符串A=”abababaababacb”，B=”ababacb”，首先看看朴素算法是怎么工作的。我们用两个指针i和j分别表示，A[i-j+ 1..i]与B[1..j]完全相等。刚开始我们先从i=j=1开始比较，当我们发现i=j=5时，A和B的下一个字符就不相等了。 . i = 1 2 3 4 5 6 7 8 9 …… A = a b a b a b a a b a b … B = a b a b a c b j = 1 2 3 4 5 6 7 . 那么此时我们就要把i倒退回i=2，j倒退回j=1重新开始比较。 . i = 1 2 3 4 5 6 7 8 9 …… A = a b a b a b a a b a b … B = a b a b a c b j = 1 2 3 4 5 6 7 . 因此当我们遇到像A= “aaaaaaaaaaaaaaaaaaaaaaaaaab”，B=”aaaaaaaab”这样的字符串时，传统朴素算法每次匹配错误后B串只前进一格的做法就显得很慢。 KMP算法高效解决了字符串匹配中不断回退的问题，也就是上面例子中i从5倒退回2的问题。KMP算法的想法是相对于之前一次匹配不成功子串前进一格，能不能子串一次前进多个格子。在提出解决方案前，我们首先引入一些概念： . 部分匹配表 . 下面这个是“ababacb”这个模板的部分匹配表： . index: 1 2 3 4 5 6 7 . char: | a | b | a | b | a | c | b | . value: | 0 | 0 | 1 | 2 | 3 | 0 | 0 | . 如果我有一个7个字符的模板（这里我们就用“ababacb”来举例子），我的部分匹配表将会有7格。如果此时此刻我正匹配模板的第7格即最后一格，那意味着我匹配了整个模板（“ababacb”）；如果我正匹配模板的第6格，则意味着当前仅匹配了整个模板的前6位（“ababac”），此时第7位(“b”)是无关的，不用去管它；目前我还没有提到部分匹配表每格数据的含义，在这里仅仅是交代了大概。 . 现在，为了说明刚刚提到的每格数据的含义，我们首先要明白什么是最优前缀什么是最优后缀。 . 最优前缀 . 一个字符串中，去除一个或多个尾部的字符所得的新字符串就是最优前缀。例如 “S”、 “Sn”、 “Sna”、 “Snap”都是“Snape”的最优前缀。 . 最优后缀 . 一个字符串中，去除一个或多个首部的字符所得的新字符串就是最优后缀。例如“agrid”、 “grid”、“rid”、 “id”、“d”都是 “Hagrid”的最优后缀。 . 有了两个概念，我现在可以用一句话来概括部分匹配表里每列数据的含义了： . 模板（子模板）中，既是最优前缀也是最优后缀的最长字符串的长度。 . 下面我举例说明一下这句话。我们来看部分匹配表的第3格数据，如果你还记得我在前面提到的，这意味着我们目前仅仅关心前3个字母（“aba”）。在“aba”这个子模板中，有两个最优前缀（“a”和“ab”）和两个最优后缀（“a”和“ba”）。其中，最优前缀“ab”并不是最优后缀。因此，最优前缀与最优后缀中，相同的只有“a”。那么，此时此刻既是最优前缀也是最优后缀的最长字符串的长度就是1了。 . 我们再来试试第4格，我们应该是关注于前4个字母（“abab”）。可以看出，有3个最优前缀（“a”、“ab”、 “aba”）和3个最优后缀（“b”、“ab”、“bab”）。这一次 “ab” 既是最优前缀也是最优后缀，并且长度为2，因此，部分匹配表的第4格值为2。 . 这是很有趣的例子，我们再看看第5格的情况，也就是考虑“ababa”。我们有4个最优前缀（“a”、 “ab”、“aba”，和“abab”）和4个最优后缀（“a”、 “ba”、“aba”，和“baba”）。现在，有两个匹配“a”和“aba” 既是最优前缀也是最优后缀，而“aba”比“a”要长，所以部分匹配表的第5格值为3。 . 看看第6格的情况，不难看出，这两个集合之间不会有任何的交集。因为，所有最优后缀都以“c”结尾，但没有任何最优前缀是以“c”结尾的，所以没有相匹配的，因此第7格值为0。 . 当我们找到了部分匹配的字符串时，可以用部分匹配表里的值来跳过前面一些字符（而不是重复进行没有必要的比较）。具体是这样工作的： 当i=j=5时，i的值保持不变，j=3，然后继续比较。当i=7，j=5时发现下一组又不相等了，此时i保持不变，j=3，然后又开始比较。也就是说，i是不断增加的，随着i的增加j相应地变化，且j满足以A[i]结尾的长度为j的字符串正好匹配B串的前 j个字符（j当然越大越好）。那么如何得知j该等于多少呢，现在需要检验A[i+1]和B[j+1]的关系。当A[i+1]=B[j+1]时，i和j各加一；什么时候j=m了，我们就说B是A的子串（B串已经整完了），并且可以根据这时的i值算出匹配的位置。当A[i+1]!=B[j+1]，KMP的策略是调整j的位置（减小j值）使得A[i-j+1..i]与B[1..j]保持匹配且新的B[j+1]恰好与A[i+1]匹配（从而使得i和j能继续增加）。 . 我们看一看当 i=j=5时的情况。 . i = 1 2 3 4 5 6 7 8 9 …… A = a b a b a b a a b a b … B = a b a b a c b j = 1 2 3 4 5 6 7 . 此时，A[6]!=B[6]。这表明，此时j不能等于5了，我们要把j改成比它小的值j’。j’可能是多少呢？仔细想一下，我们发现，j’必须要使得B[1..j]中的头j’个字母和末j’个字母完全相等（这样j变成了j’后才能继续保持i和j的性质）。这个j’当然要越大越好。而这恰好是部分匹配表的性质，即我们要找既是最优前缀又是最优后缀的最长字符串。在这里，B [1..5]=”ababa”，”aba”就是我们想要的，于是j=next[j]。而当新的j为3时，A[6]恰好和B[4]相等。于是，i变成了6，而j则变成了 4： . i = 1 2 3 4 5 6 7 8 9 …… A = a b a b a b a a b a b … B = a b a b a c b j = 1 2 3 4 5 6 7 . ps：代码不想写，上其他博客找吧。 .",
            "url": "https://invisprints.github.io/blog/algorithm/2016/11/13/KMP-%E7%AE%97%E6%B3%95.html",
            "relUrl": "/algorithm/2016/11/13/KMP-%E7%AE%97%E6%B3%95.html",
            "date": " • Nov 13, 2016"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "🥳About Me",
          "content": "研究生·深度学习&amp;NAS·Fastai·二次元·沉迷研究各种无用工具和学习方法 .",
          "url": "https://invisprints.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://invisprints.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}